// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/choonhong/hotel-data-merge/domain"
	"github.com/choonhong/hotel-data-merge/ent/data"
	"github.com/choonhong/hotel-data-merge/ent/hotel"
	"github.com/choonhong/hotel-data-merge/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeData  = "Data"
	TypeHotel = "Hotel"
)

// DataMutation represents an operation that mutates the Data nodes in the graph.
type DataMutation struct {
	config
	op              Op
	typ             string
	id              *string
	destination_id  *string
	name            *string
	latitude        *float64
	addlatitude     *float64
	longitude       *float64
	addlongitude    *float64
	address         *string
	city            *string
	country         *string
	details         *string
	amenities       *[]string
	appendamenities []string
	images          *[]domain.Image
	appendimages    []domain.Image
	provider        *string
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*Data, error)
	predicates      []predicate.Data
}

var _ ent.Mutation = (*DataMutation)(nil)

// dataOption allows management of the mutation configuration using functional options.
type dataOption func(*DataMutation)

// newDataMutation creates new mutation for the Data entity.
func newDataMutation(c config, op Op, opts ...dataOption) *DataMutation {
	m := &DataMutation{
		config:        c,
		op:            op,
		typ:           TypeData,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDataID sets the ID field of the mutation.
func withDataID(id string) dataOption {
	return func(m *DataMutation) {
		var (
			err   error
			once  sync.Once
			value *Data
		)
		m.oldValue = func(ctx context.Context) (*Data, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Data.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withData sets the old Data of the mutation.
func withData(node *Data) dataOption {
	return func(m *DataMutation) {
		m.oldValue = func(context.Context) (*Data, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DataMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DataMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Data entities.
func (m *DataMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DataMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DataMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Data.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDestinationID sets the "destination_id" field.
func (m *DataMutation) SetDestinationID(s string) {
	m.destination_id = &s
}

// DestinationID returns the value of the "destination_id" field in the mutation.
func (m *DataMutation) DestinationID() (r string, exists bool) {
	v := m.destination_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDestinationID returns the old "destination_id" field's value of the Data entity.
// If the Data object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DataMutation) OldDestinationID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDestinationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDestinationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDestinationID: %w", err)
	}
	return oldValue.DestinationID, nil
}

// ResetDestinationID resets all changes to the "destination_id" field.
func (m *DataMutation) ResetDestinationID() {
	m.destination_id = nil
}

// SetName sets the "name" field.
func (m *DataMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DataMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Data entity.
// If the Data object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DataMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DataMutation) ResetName() {
	m.name = nil
}

// SetLatitude sets the "latitude" field.
func (m *DataMutation) SetLatitude(f float64) {
	m.latitude = &f
	m.addlatitude = nil
}

// Latitude returns the value of the "latitude" field in the mutation.
func (m *DataMutation) Latitude() (r float64, exists bool) {
	v := m.latitude
	if v == nil {
		return
	}
	return *v, true
}

// OldLatitude returns the old "latitude" field's value of the Data entity.
// If the Data object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DataMutation) OldLatitude(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLatitude is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLatitude requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLatitude: %w", err)
	}
	return oldValue.Latitude, nil
}

// AddLatitude adds f to the "latitude" field.
func (m *DataMutation) AddLatitude(f float64) {
	if m.addlatitude != nil {
		*m.addlatitude += f
	} else {
		m.addlatitude = &f
	}
}

// AddedLatitude returns the value that was added to the "latitude" field in this mutation.
func (m *DataMutation) AddedLatitude() (r float64, exists bool) {
	v := m.addlatitude
	if v == nil {
		return
	}
	return *v, true
}

// ResetLatitude resets all changes to the "latitude" field.
func (m *DataMutation) ResetLatitude() {
	m.latitude = nil
	m.addlatitude = nil
}

// SetLongitude sets the "longitude" field.
func (m *DataMutation) SetLongitude(f float64) {
	m.longitude = &f
	m.addlongitude = nil
}

// Longitude returns the value of the "longitude" field in the mutation.
func (m *DataMutation) Longitude() (r float64, exists bool) {
	v := m.longitude
	if v == nil {
		return
	}
	return *v, true
}

// OldLongitude returns the old "longitude" field's value of the Data entity.
// If the Data object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DataMutation) OldLongitude(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLongitude is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLongitude requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLongitude: %w", err)
	}
	return oldValue.Longitude, nil
}

// AddLongitude adds f to the "longitude" field.
func (m *DataMutation) AddLongitude(f float64) {
	if m.addlongitude != nil {
		*m.addlongitude += f
	} else {
		m.addlongitude = &f
	}
}

// AddedLongitude returns the value that was added to the "longitude" field in this mutation.
func (m *DataMutation) AddedLongitude() (r float64, exists bool) {
	v := m.addlongitude
	if v == nil {
		return
	}
	return *v, true
}

// ResetLongitude resets all changes to the "longitude" field.
func (m *DataMutation) ResetLongitude() {
	m.longitude = nil
	m.addlongitude = nil
}

// SetAddress sets the "address" field.
func (m *DataMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *DataMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Data entity.
// If the Data object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DataMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *DataMutation) ResetAddress() {
	m.address = nil
}

// SetCity sets the "city" field.
func (m *DataMutation) SetCity(s string) {
	m.city = &s
}

// City returns the value of the "city" field in the mutation.
func (m *DataMutation) City() (r string, exists bool) {
	v := m.city
	if v == nil {
		return
	}
	return *v, true
}

// OldCity returns the old "city" field's value of the Data entity.
// If the Data object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DataMutation) OldCity(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCity: %w", err)
	}
	return oldValue.City, nil
}

// ResetCity resets all changes to the "city" field.
func (m *DataMutation) ResetCity() {
	m.city = nil
}

// SetCountry sets the "country" field.
func (m *DataMutation) SetCountry(s string) {
	m.country = &s
}

// Country returns the value of the "country" field in the mutation.
func (m *DataMutation) Country() (r string, exists bool) {
	v := m.country
	if v == nil {
		return
	}
	return *v, true
}

// OldCountry returns the old "country" field's value of the Data entity.
// If the Data object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DataMutation) OldCountry(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCountry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCountry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountry: %w", err)
	}
	return oldValue.Country, nil
}

// ResetCountry resets all changes to the "country" field.
func (m *DataMutation) ResetCountry() {
	m.country = nil
}

// SetDetails sets the "details" field.
func (m *DataMutation) SetDetails(s string) {
	m.details = &s
}

// Details returns the value of the "details" field in the mutation.
func (m *DataMutation) Details() (r string, exists bool) {
	v := m.details
	if v == nil {
		return
	}
	return *v, true
}

// OldDetails returns the old "details" field's value of the Data entity.
// If the Data object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DataMutation) OldDetails(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDetails is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDetails requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDetails: %w", err)
	}
	return oldValue.Details, nil
}

// ResetDetails resets all changes to the "details" field.
func (m *DataMutation) ResetDetails() {
	m.details = nil
}

// SetAmenities sets the "amenities" field.
func (m *DataMutation) SetAmenities(s []string) {
	m.amenities = &s
	m.appendamenities = nil
}

// Amenities returns the value of the "amenities" field in the mutation.
func (m *DataMutation) Amenities() (r []string, exists bool) {
	v := m.amenities
	if v == nil {
		return
	}
	return *v, true
}

// OldAmenities returns the old "amenities" field's value of the Data entity.
// If the Data object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DataMutation) OldAmenities(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmenities is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmenities requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmenities: %w", err)
	}
	return oldValue.Amenities, nil
}

// AppendAmenities adds s to the "amenities" field.
func (m *DataMutation) AppendAmenities(s []string) {
	m.appendamenities = append(m.appendamenities, s...)
}

// AppendedAmenities returns the list of values that were appended to the "amenities" field in this mutation.
func (m *DataMutation) AppendedAmenities() ([]string, bool) {
	if len(m.appendamenities) == 0 {
		return nil, false
	}
	return m.appendamenities, true
}

// ResetAmenities resets all changes to the "amenities" field.
func (m *DataMutation) ResetAmenities() {
	m.amenities = nil
	m.appendamenities = nil
}

// SetImages sets the "images" field.
func (m *DataMutation) SetImages(d []domain.Image) {
	m.images = &d
	m.appendimages = nil
}

// Images returns the value of the "images" field in the mutation.
func (m *DataMutation) Images() (r []domain.Image, exists bool) {
	v := m.images
	if v == nil {
		return
	}
	return *v, true
}

// OldImages returns the old "images" field's value of the Data entity.
// If the Data object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DataMutation) OldImages(ctx context.Context) (v []domain.Image, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImages is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImages requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImages: %w", err)
	}
	return oldValue.Images, nil
}

// AppendImages adds d to the "images" field.
func (m *DataMutation) AppendImages(d []domain.Image) {
	m.appendimages = append(m.appendimages, d...)
}

// AppendedImages returns the list of values that were appended to the "images" field in this mutation.
func (m *DataMutation) AppendedImages() ([]domain.Image, bool) {
	if len(m.appendimages) == 0 {
		return nil, false
	}
	return m.appendimages, true
}

// ResetImages resets all changes to the "images" field.
func (m *DataMutation) ResetImages() {
	m.images = nil
	m.appendimages = nil
}

// SetProvider sets the "provider" field.
func (m *DataMutation) SetProvider(s string) {
	m.provider = &s
}

// Provider returns the value of the "provider" field in the mutation.
func (m *DataMutation) Provider() (r string, exists bool) {
	v := m.provider
	if v == nil {
		return
	}
	return *v, true
}

// OldProvider returns the old "provider" field's value of the Data entity.
// If the Data object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DataMutation) OldProvider(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProvider is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProvider requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProvider: %w", err)
	}
	return oldValue.Provider, nil
}

// ResetProvider resets all changes to the "provider" field.
func (m *DataMutation) ResetProvider() {
	m.provider = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DataMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DataMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Data entity.
// If the Data object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DataMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DataMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the DataMutation builder.
func (m *DataMutation) Where(ps ...predicate.Data) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DataMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DataMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Data, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DataMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DataMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Data).
func (m *DataMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DataMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.destination_id != nil {
		fields = append(fields, data.FieldDestinationID)
	}
	if m.name != nil {
		fields = append(fields, data.FieldName)
	}
	if m.latitude != nil {
		fields = append(fields, data.FieldLatitude)
	}
	if m.longitude != nil {
		fields = append(fields, data.FieldLongitude)
	}
	if m.address != nil {
		fields = append(fields, data.FieldAddress)
	}
	if m.city != nil {
		fields = append(fields, data.FieldCity)
	}
	if m.country != nil {
		fields = append(fields, data.FieldCountry)
	}
	if m.details != nil {
		fields = append(fields, data.FieldDetails)
	}
	if m.amenities != nil {
		fields = append(fields, data.FieldAmenities)
	}
	if m.images != nil {
		fields = append(fields, data.FieldImages)
	}
	if m.provider != nil {
		fields = append(fields, data.FieldProvider)
	}
	if m.updated_at != nil {
		fields = append(fields, data.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DataMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case data.FieldDestinationID:
		return m.DestinationID()
	case data.FieldName:
		return m.Name()
	case data.FieldLatitude:
		return m.Latitude()
	case data.FieldLongitude:
		return m.Longitude()
	case data.FieldAddress:
		return m.Address()
	case data.FieldCity:
		return m.City()
	case data.FieldCountry:
		return m.Country()
	case data.FieldDetails:
		return m.Details()
	case data.FieldAmenities:
		return m.Amenities()
	case data.FieldImages:
		return m.Images()
	case data.FieldProvider:
		return m.Provider()
	case data.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DataMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case data.FieldDestinationID:
		return m.OldDestinationID(ctx)
	case data.FieldName:
		return m.OldName(ctx)
	case data.FieldLatitude:
		return m.OldLatitude(ctx)
	case data.FieldLongitude:
		return m.OldLongitude(ctx)
	case data.FieldAddress:
		return m.OldAddress(ctx)
	case data.FieldCity:
		return m.OldCity(ctx)
	case data.FieldCountry:
		return m.OldCountry(ctx)
	case data.FieldDetails:
		return m.OldDetails(ctx)
	case data.FieldAmenities:
		return m.OldAmenities(ctx)
	case data.FieldImages:
		return m.OldImages(ctx)
	case data.FieldProvider:
		return m.OldProvider(ctx)
	case data.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Data field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DataMutation) SetField(name string, value ent.Value) error {
	switch name {
	case data.FieldDestinationID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDestinationID(v)
		return nil
	case data.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case data.FieldLatitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLatitude(v)
		return nil
	case data.FieldLongitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLongitude(v)
		return nil
	case data.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case data.FieldCity:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCity(v)
		return nil
	case data.FieldCountry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountry(v)
		return nil
	case data.FieldDetails:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDetails(v)
		return nil
	case data.FieldAmenities:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmenities(v)
		return nil
	case data.FieldImages:
		v, ok := value.([]domain.Image)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImages(v)
		return nil
	case data.FieldProvider:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProvider(v)
		return nil
	case data.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Data field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DataMutation) AddedFields() []string {
	var fields []string
	if m.addlatitude != nil {
		fields = append(fields, data.FieldLatitude)
	}
	if m.addlongitude != nil {
		fields = append(fields, data.FieldLongitude)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DataMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case data.FieldLatitude:
		return m.AddedLatitude()
	case data.FieldLongitude:
		return m.AddedLongitude()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DataMutation) AddField(name string, value ent.Value) error {
	switch name {
	case data.FieldLatitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLatitude(v)
		return nil
	case data.FieldLongitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLongitude(v)
		return nil
	}
	return fmt.Errorf("unknown Data numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DataMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DataMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DataMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Data nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DataMutation) ResetField(name string) error {
	switch name {
	case data.FieldDestinationID:
		m.ResetDestinationID()
		return nil
	case data.FieldName:
		m.ResetName()
		return nil
	case data.FieldLatitude:
		m.ResetLatitude()
		return nil
	case data.FieldLongitude:
		m.ResetLongitude()
		return nil
	case data.FieldAddress:
		m.ResetAddress()
		return nil
	case data.FieldCity:
		m.ResetCity()
		return nil
	case data.FieldCountry:
		m.ResetCountry()
		return nil
	case data.FieldDetails:
		m.ResetDetails()
		return nil
	case data.FieldAmenities:
		m.ResetAmenities()
		return nil
	case data.FieldImages:
		m.ResetImages()
		return nil
	case data.FieldProvider:
		m.ResetProvider()
		return nil
	case data.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Data field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DataMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DataMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DataMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DataMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DataMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DataMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DataMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Data unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DataMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Data edge %s", name)
}

// HotelMutation represents an operation that mutates the Hotel nodes in the graph.
type HotelMutation struct {
	config
	op              Op
	typ             string
	id              *string
	destination_id  *string
	name            *string
	latitude        *float64
	addlatitude     *float64
	longitude       *float64
	addlongitude    *float64
	address         *string
	city            *string
	country         *string
	details         *string
	amenities       *[]string
	appendamenities []string
	images          *[]domain.Image
	appendimages    []domain.Image
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*Hotel, error)
	predicates      []predicate.Hotel
}

var _ ent.Mutation = (*HotelMutation)(nil)

// hotelOption allows management of the mutation configuration using functional options.
type hotelOption func(*HotelMutation)

// newHotelMutation creates new mutation for the Hotel entity.
func newHotelMutation(c config, op Op, opts ...hotelOption) *HotelMutation {
	m := &HotelMutation{
		config:        c,
		op:            op,
		typ:           TypeHotel,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHotelID sets the ID field of the mutation.
func withHotelID(id string) hotelOption {
	return func(m *HotelMutation) {
		var (
			err   error
			once  sync.Once
			value *Hotel
		)
		m.oldValue = func(ctx context.Context) (*Hotel, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Hotel.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHotel sets the old Hotel of the mutation.
func withHotel(node *Hotel) hotelOption {
	return func(m *HotelMutation) {
		m.oldValue = func(context.Context) (*Hotel, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HotelMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HotelMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Hotel entities.
func (m *HotelMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HotelMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HotelMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Hotel.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDestinationID sets the "destination_id" field.
func (m *HotelMutation) SetDestinationID(s string) {
	m.destination_id = &s
}

// DestinationID returns the value of the "destination_id" field in the mutation.
func (m *HotelMutation) DestinationID() (r string, exists bool) {
	v := m.destination_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDestinationID returns the old "destination_id" field's value of the Hotel entity.
// If the Hotel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HotelMutation) OldDestinationID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDestinationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDestinationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDestinationID: %w", err)
	}
	return oldValue.DestinationID, nil
}

// ResetDestinationID resets all changes to the "destination_id" field.
func (m *HotelMutation) ResetDestinationID() {
	m.destination_id = nil
}

// SetName sets the "name" field.
func (m *HotelMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *HotelMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Hotel entity.
// If the Hotel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HotelMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *HotelMutation) ResetName() {
	m.name = nil
}

// SetLatitude sets the "latitude" field.
func (m *HotelMutation) SetLatitude(f float64) {
	m.latitude = &f
	m.addlatitude = nil
}

// Latitude returns the value of the "latitude" field in the mutation.
func (m *HotelMutation) Latitude() (r float64, exists bool) {
	v := m.latitude
	if v == nil {
		return
	}
	return *v, true
}

// OldLatitude returns the old "latitude" field's value of the Hotel entity.
// If the Hotel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HotelMutation) OldLatitude(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLatitude is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLatitude requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLatitude: %w", err)
	}
	return oldValue.Latitude, nil
}

// AddLatitude adds f to the "latitude" field.
func (m *HotelMutation) AddLatitude(f float64) {
	if m.addlatitude != nil {
		*m.addlatitude += f
	} else {
		m.addlatitude = &f
	}
}

// AddedLatitude returns the value that was added to the "latitude" field in this mutation.
func (m *HotelMutation) AddedLatitude() (r float64, exists bool) {
	v := m.addlatitude
	if v == nil {
		return
	}
	return *v, true
}

// ResetLatitude resets all changes to the "latitude" field.
func (m *HotelMutation) ResetLatitude() {
	m.latitude = nil
	m.addlatitude = nil
}

// SetLongitude sets the "longitude" field.
func (m *HotelMutation) SetLongitude(f float64) {
	m.longitude = &f
	m.addlongitude = nil
}

// Longitude returns the value of the "longitude" field in the mutation.
func (m *HotelMutation) Longitude() (r float64, exists bool) {
	v := m.longitude
	if v == nil {
		return
	}
	return *v, true
}

// OldLongitude returns the old "longitude" field's value of the Hotel entity.
// If the Hotel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HotelMutation) OldLongitude(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLongitude is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLongitude requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLongitude: %w", err)
	}
	return oldValue.Longitude, nil
}

// AddLongitude adds f to the "longitude" field.
func (m *HotelMutation) AddLongitude(f float64) {
	if m.addlongitude != nil {
		*m.addlongitude += f
	} else {
		m.addlongitude = &f
	}
}

// AddedLongitude returns the value that was added to the "longitude" field in this mutation.
func (m *HotelMutation) AddedLongitude() (r float64, exists bool) {
	v := m.addlongitude
	if v == nil {
		return
	}
	return *v, true
}

// ResetLongitude resets all changes to the "longitude" field.
func (m *HotelMutation) ResetLongitude() {
	m.longitude = nil
	m.addlongitude = nil
}

// SetAddress sets the "address" field.
func (m *HotelMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *HotelMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Hotel entity.
// If the Hotel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HotelMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *HotelMutation) ResetAddress() {
	m.address = nil
}

// SetCity sets the "city" field.
func (m *HotelMutation) SetCity(s string) {
	m.city = &s
}

// City returns the value of the "city" field in the mutation.
func (m *HotelMutation) City() (r string, exists bool) {
	v := m.city
	if v == nil {
		return
	}
	return *v, true
}

// OldCity returns the old "city" field's value of the Hotel entity.
// If the Hotel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HotelMutation) OldCity(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCity: %w", err)
	}
	return oldValue.City, nil
}

// ResetCity resets all changes to the "city" field.
func (m *HotelMutation) ResetCity() {
	m.city = nil
}

// SetCountry sets the "country" field.
func (m *HotelMutation) SetCountry(s string) {
	m.country = &s
}

// Country returns the value of the "country" field in the mutation.
func (m *HotelMutation) Country() (r string, exists bool) {
	v := m.country
	if v == nil {
		return
	}
	return *v, true
}

// OldCountry returns the old "country" field's value of the Hotel entity.
// If the Hotel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HotelMutation) OldCountry(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCountry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCountry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountry: %w", err)
	}
	return oldValue.Country, nil
}

// ResetCountry resets all changes to the "country" field.
func (m *HotelMutation) ResetCountry() {
	m.country = nil
}

// SetDetails sets the "details" field.
func (m *HotelMutation) SetDetails(s string) {
	m.details = &s
}

// Details returns the value of the "details" field in the mutation.
func (m *HotelMutation) Details() (r string, exists bool) {
	v := m.details
	if v == nil {
		return
	}
	return *v, true
}

// OldDetails returns the old "details" field's value of the Hotel entity.
// If the Hotel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HotelMutation) OldDetails(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDetails is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDetails requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDetails: %w", err)
	}
	return oldValue.Details, nil
}

// ResetDetails resets all changes to the "details" field.
func (m *HotelMutation) ResetDetails() {
	m.details = nil
}

// SetAmenities sets the "amenities" field.
func (m *HotelMutation) SetAmenities(s []string) {
	m.amenities = &s
	m.appendamenities = nil
}

// Amenities returns the value of the "amenities" field in the mutation.
func (m *HotelMutation) Amenities() (r []string, exists bool) {
	v := m.amenities
	if v == nil {
		return
	}
	return *v, true
}

// OldAmenities returns the old "amenities" field's value of the Hotel entity.
// If the Hotel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HotelMutation) OldAmenities(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmenities is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmenities requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmenities: %w", err)
	}
	return oldValue.Amenities, nil
}

// AppendAmenities adds s to the "amenities" field.
func (m *HotelMutation) AppendAmenities(s []string) {
	m.appendamenities = append(m.appendamenities, s...)
}

// AppendedAmenities returns the list of values that were appended to the "amenities" field in this mutation.
func (m *HotelMutation) AppendedAmenities() ([]string, bool) {
	if len(m.appendamenities) == 0 {
		return nil, false
	}
	return m.appendamenities, true
}

// ResetAmenities resets all changes to the "amenities" field.
func (m *HotelMutation) ResetAmenities() {
	m.amenities = nil
	m.appendamenities = nil
}

// SetImages sets the "images" field.
func (m *HotelMutation) SetImages(d []domain.Image) {
	m.images = &d
	m.appendimages = nil
}

// Images returns the value of the "images" field in the mutation.
func (m *HotelMutation) Images() (r []domain.Image, exists bool) {
	v := m.images
	if v == nil {
		return
	}
	return *v, true
}

// OldImages returns the old "images" field's value of the Hotel entity.
// If the Hotel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HotelMutation) OldImages(ctx context.Context) (v []domain.Image, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImages is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImages requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImages: %w", err)
	}
	return oldValue.Images, nil
}

// AppendImages adds d to the "images" field.
func (m *HotelMutation) AppendImages(d []domain.Image) {
	m.appendimages = append(m.appendimages, d...)
}

// AppendedImages returns the list of values that were appended to the "images" field in this mutation.
func (m *HotelMutation) AppendedImages() ([]domain.Image, bool) {
	if len(m.appendimages) == 0 {
		return nil, false
	}
	return m.appendimages, true
}

// ResetImages resets all changes to the "images" field.
func (m *HotelMutation) ResetImages() {
	m.images = nil
	m.appendimages = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *HotelMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *HotelMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Hotel entity.
// If the Hotel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HotelMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *HotelMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the HotelMutation builder.
func (m *HotelMutation) Where(ps ...predicate.Hotel) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the HotelMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *HotelMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Hotel, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *HotelMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *HotelMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Hotel).
func (m *HotelMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HotelMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.destination_id != nil {
		fields = append(fields, hotel.FieldDestinationID)
	}
	if m.name != nil {
		fields = append(fields, hotel.FieldName)
	}
	if m.latitude != nil {
		fields = append(fields, hotel.FieldLatitude)
	}
	if m.longitude != nil {
		fields = append(fields, hotel.FieldLongitude)
	}
	if m.address != nil {
		fields = append(fields, hotel.FieldAddress)
	}
	if m.city != nil {
		fields = append(fields, hotel.FieldCity)
	}
	if m.country != nil {
		fields = append(fields, hotel.FieldCountry)
	}
	if m.details != nil {
		fields = append(fields, hotel.FieldDetails)
	}
	if m.amenities != nil {
		fields = append(fields, hotel.FieldAmenities)
	}
	if m.images != nil {
		fields = append(fields, hotel.FieldImages)
	}
	if m.updated_at != nil {
		fields = append(fields, hotel.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HotelMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case hotel.FieldDestinationID:
		return m.DestinationID()
	case hotel.FieldName:
		return m.Name()
	case hotel.FieldLatitude:
		return m.Latitude()
	case hotel.FieldLongitude:
		return m.Longitude()
	case hotel.FieldAddress:
		return m.Address()
	case hotel.FieldCity:
		return m.City()
	case hotel.FieldCountry:
		return m.Country()
	case hotel.FieldDetails:
		return m.Details()
	case hotel.FieldAmenities:
		return m.Amenities()
	case hotel.FieldImages:
		return m.Images()
	case hotel.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HotelMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case hotel.FieldDestinationID:
		return m.OldDestinationID(ctx)
	case hotel.FieldName:
		return m.OldName(ctx)
	case hotel.FieldLatitude:
		return m.OldLatitude(ctx)
	case hotel.FieldLongitude:
		return m.OldLongitude(ctx)
	case hotel.FieldAddress:
		return m.OldAddress(ctx)
	case hotel.FieldCity:
		return m.OldCity(ctx)
	case hotel.FieldCountry:
		return m.OldCountry(ctx)
	case hotel.FieldDetails:
		return m.OldDetails(ctx)
	case hotel.FieldAmenities:
		return m.OldAmenities(ctx)
	case hotel.FieldImages:
		return m.OldImages(ctx)
	case hotel.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Hotel field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HotelMutation) SetField(name string, value ent.Value) error {
	switch name {
	case hotel.FieldDestinationID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDestinationID(v)
		return nil
	case hotel.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case hotel.FieldLatitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLatitude(v)
		return nil
	case hotel.FieldLongitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLongitude(v)
		return nil
	case hotel.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case hotel.FieldCity:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCity(v)
		return nil
	case hotel.FieldCountry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountry(v)
		return nil
	case hotel.FieldDetails:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDetails(v)
		return nil
	case hotel.FieldAmenities:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmenities(v)
		return nil
	case hotel.FieldImages:
		v, ok := value.([]domain.Image)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImages(v)
		return nil
	case hotel.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Hotel field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HotelMutation) AddedFields() []string {
	var fields []string
	if m.addlatitude != nil {
		fields = append(fields, hotel.FieldLatitude)
	}
	if m.addlongitude != nil {
		fields = append(fields, hotel.FieldLongitude)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HotelMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case hotel.FieldLatitude:
		return m.AddedLatitude()
	case hotel.FieldLongitude:
		return m.AddedLongitude()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HotelMutation) AddField(name string, value ent.Value) error {
	switch name {
	case hotel.FieldLatitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLatitude(v)
		return nil
	case hotel.FieldLongitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLongitude(v)
		return nil
	}
	return fmt.Errorf("unknown Hotel numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HotelMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HotelMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HotelMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Hotel nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HotelMutation) ResetField(name string) error {
	switch name {
	case hotel.FieldDestinationID:
		m.ResetDestinationID()
		return nil
	case hotel.FieldName:
		m.ResetName()
		return nil
	case hotel.FieldLatitude:
		m.ResetLatitude()
		return nil
	case hotel.FieldLongitude:
		m.ResetLongitude()
		return nil
	case hotel.FieldAddress:
		m.ResetAddress()
		return nil
	case hotel.FieldCity:
		m.ResetCity()
		return nil
	case hotel.FieldCountry:
		m.ResetCountry()
		return nil
	case hotel.FieldDetails:
		m.ResetDetails()
		return nil
	case hotel.FieldAmenities:
		m.ResetAmenities()
		return nil
	case hotel.FieldImages:
		m.ResetImages()
		return nil
	case hotel.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Hotel field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HotelMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HotelMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HotelMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HotelMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HotelMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HotelMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HotelMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Hotel unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HotelMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Hotel edge %s", name)
}
