// Code generated by ent, DO NOT EDIT.

package data

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/choonhong/hotel-data-merge/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Data {
	return predicate.Data(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Data {
	return predicate.Data(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Data {
	return predicate.Data(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Data {
	return predicate.Data(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Data {
	return predicate.Data(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Data {
	return predicate.Data(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Data {
	return predicate.Data(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Data {
	return predicate.Data(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Data {
	return predicate.Data(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Data {
	return predicate.Data(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Data {
	return predicate.Data(sql.FieldContainsFold(FieldID, id))
}

// DestinationID applies equality check predicate on the "destination_id" field. It's identical to DestinationIDEQ.
func DestinationID(v string) predicate.Data {
	return predicate.Data(sql.FieldEQ(FieldDestinationID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Data {
	return predicate.Data(sql.FieldEQ(FieldName, v))
}

// Latitude applies equality check predicate on the "latitude" field. It's identical to LatitudeEQ.
func Latitude(v float64) predicate.Data {
	return predicate.Data(sql.FieldEQ(FieldLatitude, v))
}

// Longitude applies equality check predicate on the "longitude" field. It's identical to LongitudeEQ.
func Longitude(v float64) predicate.Data {
	return predicate.Data(sql.FieldEQ(FieldLongitude, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Data {
	return predicate.Data(sql.FieldEQ(FieldAddress, v))
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.Data {
	return predicate.Data(sql.FieldEQ(FieldCity, v))
}

// Country applies equality check predicate on the "country" field. It's identical to CountryEQ.
func Country(v string) predicate.Data {
	return predicate.Data(sql.FieldEQ(FieldCountry, v))
}

// Details applies equality check predicate on the "details" field. It's identical to DetailsEQ.
func Details(v string) predicate.Data {
	return predicate.Data(sql.FieldEQ(FieldDetails, v))
}

// Provider applies equality check predicate on the "provider" field. It's identical to ProviderEQ.
func Provider(v string) predicate.Data {
	return predicate.Data(sql.FieldEQ(FieldProvider, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Data {
	return predicate.Data(sql.FieldEQ(FieldUpdatedAt, v))
}

// DestinationIDEQ applies the EQ predicate on the "destination_id" field.
func DestinationIDEQ(v string) predicate.Data {
	return predicate.Data(sql.FieldEQ(FieldDestinationID, v))
}

// DestinationIDNEQ applies the NEQ predicate on the "destination_id" field.
func DestinationIDNEQ(v string) predicate.Data {
	return predicate.Data(sql.FieldNEQ(FieldDestinationID, v))
}

// DestinationIDIn applies the In predicate on the "destination_id" field.
func DestinationIDIn(vs ...string) predicate.Data {
	return predicate.Data(sql.FieldIn(FieldDestinationID, vs...))
}

// DestinationIDNotIn applies the NotIn predicate on the "destination_id" field.
func DestinationIDNotIn(vs ...string) predicate.Data {
	return predicate.Data(sql.FieldNotIn(FieldDestinationID, vs...))
}

// DestinationIDGT applies the GT predicate on the "destination_id" field.
func DestinationIDGT(v string) predicate.Data {
	return predicate.Data(sql.FieldGT(FieldDestinationID, v))
}

// DestinationIDGTE applies the GTE predicate on the "destination_id" field.
func DestinationIDGTE(v string) predicate.Data {
	return predicate.Data(sql.FieldGTE(FieldDestinationID, v))
}

// DestinationIDLT applies the LT predicate on the "destination_id" field.
func DestinationIDLT(v string) predicate.Data {
	return predicate.Data(sql.FieldLT(FieldDestinationID, v))
}

// DestinationIDLTE applies the LTE predicate on the "destination_id" field.
func DestinationIDLTE(v string) predicate.Data {
	return predicate.Data(sql.FieldLTE(FieldDestinationID, v))
}

// DestinationIDContains applies the Contains predicate on the "destination_id" field.
func DestinationIDContains(v string) predicate.Data {
	return predicate.Data(sql.FieldContains(FieldDestinationID, v))
}

// DestinationIDHasPrefix applies the HasPrefix predicate on the "destination_id" field.
func DestinationIDHasPrefix(v string) predicate.Data {
	return predicate.Data(sql.FieldHasPrefix(FieldDestinationID, v))
}

// DestinationIDHasSuffix applies the HasSuffix predicate on the "destination_id" field.
func DestinationIDHasSuffix(v string) predicate.Data {
	return predicate.Data(sql.FieldHasSuffix(FieldDestinationID, v))
}

// DestinationIDEqualFold applies the EqualFold predicate on the "destination_id" field.
func DestinationIDEqualFold(v string) predicate.Data {
	return predicate.Data(sql.FieldEqualFold(FieldDestinationID, v))
}

// DestinationIDContainsFold applies the ContainsFold predicate on the "destination_id" field.
func DestinationIDContainsFold(v string) predicate.Data {
	return predicate.Data(sql.FieldContainsFold(FieldDestinationID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Data {
	return predicate.Data(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Data {
	return predicate.Data(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Data {
	return predicate.Data(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Data {
	return predicate.Data(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Data {
	return predicate.Data(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Data {
	return predicate.Data(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Data {
	return predicate.Data(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Data {
	return predicate.Data(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Data {
	return predicate.Data(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Data {
	return predicate.Data(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Data {
	return predicate.Data(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Data {
	return predicate.Data(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Data {
	return predicate.Data(sql.FieldContainsFold(FieldName, v))
}

// LatitudeEQ applies the EQ predicate on the "latitude" field.
func LatitudeEQ(v float64) predicate.Data {
	return predicate.Data(sql.FieldEQ(FieldLatitude, v))
}

// LatitudeNEQ applies the NEQ predicate on the "latitude" field.
func LatitudeNEQ(v float64) predicate.Data {
	return predicate.Data(sql.FieldNEQ(FieldLatitude, v))
}

// LatitudeIn applies the In predicate on the "latitude" field.
func LatitudeIn(vs ...float64) predicate.Data {
	return predicate.Data(sql.FieldIn(FieldLatitude, vs...))
}

// LatitudeNotIn applies the NotIn predicate on the "latitude" field.
func LatitudeNotIn(vs ...float64) predicate.Data {
	return predicate.Data(sql.FieldNotIn(FieldLatitude, vs...))
}

// LatitudeGT applies the GT predicate on the "latitude" field.
func LatitudeGT(v float64) predicate.Data {
	return predicate.Data(sql.FieldGT(FieldLatitude, v))
}

// LatitudeGTE applies the GTE predicate on the "latitude" field.
func LatitudeGTE(v float64) predicate.Data {
	return predicate.Data(sql.FieldGTE(FieldLatitude, v))
}

// LatitudeLT applies the LT predicate on the "latitude" field.
func LatitudeLT(v float64) predicate.Data {
	return predicate.Data(sql.FieldLT(FieldLatitude, v))
}

// LatitudeLTE applies the LTE predicate on the "latitude" field.
func LatitudeLTE(v float64) predicate.Data {
	return predicate.Data(sql.FieldLTE(FieldLatitude, v))
}

// LongitudeEQ applies the EQ predicate on the "longitude" field.
func LongitudeEQ(v float64) predicate.Data {
	return predicate.Data(sql.FieldEQ(FieldLongitude, v))
}

// LongitudeNEQ applies the NEQ predicate on the "longitude" field.
func LongitudeNEQ(v float64) predicate.Data {
	return predicate.Data(sql.FieldNEQ(FieldLongitude, v))
}

// LongitudeIn applies the In predicate on the "longitude" field.
func LongitudeIn(vs ...float64) predicate.Data {
	return predicate.Data(sql.FieldIn(FieldLongitude, vs...))
}

// LongitudeNotIn applies the NotIn predicate on the "longitude" field.
func LongitudeNotIn(vs ...float64) predicate.Data {
	return predicate.Data(sql.FieldNotIn(FieldLongitude, vs...))
}

// LongitudeGT applies the GT predicate on the "longitude" field.
func LongitudeGT(v float64) predicate.Data {
	return predicate.Data(sql.FieldGT(FieldLongitude, v))
}

// LongitudeGTE applies the GTE predicate on the "longitude" field.
func LongitudeGTE(v float64) predicate.Data {
	return predicate.Data(sql.FieldGTE(FieldLongitude, v))
}

// LongitudeLT applies the LT predicate on the "longitude" field.
func LongitudeLT(v float64) predicate.Data {
	return predicate.Data(sql.FieldLT(FieldLongitude, v))
}

// LongitudeLTE applies the LTE predicate on the "longitude" field.
func LongitudeLTE(v float64) predicate.Data {
	return predicate.Data(sql.FieldLTE(FieldLongitude, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Data {
	return predicate.Data(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Data {
	return predicate.Data(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Data {
	return predicate.Data(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Data {
	return predicate.Data(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Data {
	return predicate.Data(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Data {
	return predicate.Data(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Data {
	return predicate.Data(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Data {
	return predicate.Data(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Data {
	return predicate.Data(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Data {
	return predicate.Data(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Data {
	return predicate.Data(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Data {
	return predicate.Data(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Data {
	return predicate.Data(sql.FieldContainsFold(FieldAddress, v))
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.Data {
	return predicate.Data(sql.FieldEQ(FieldCity, v))
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.Data {
	return predicate.Data(sql.FieldNEQ(FieldCity, v))
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.Data {
	return predicate.Data(sql.FieldIn(FieldCity, vs...))
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.Data {
	return predicate.Data(sql.FieldNotIn(FieldCity, vs...))
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.Data {
	return predicate.Data(sql.FieldGT(FieldCity, v))
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.Data {
	return predicate.Data(sql.FieldGTE(FieldCity, v))
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.Data {
	return predicate.Data(sql.FieldLT(FieldCity, v))
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.Data {
	return predicate.Data(sql.FieldLTE(FieldCity, v))
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.Data {
	return predicate.Data(sql.FieldContains(FieldCity, v))
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.Data {
	return predicate.Data(sql.FieldHasPrefix(FieldCity, v))
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.Data {
	return predicate.Data(sql.FieldHasSuffix(FieldCity, v))
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.Data {
	return predicate.Data(sql.FieldEqualFold(FieldCity, v))
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.Data {
	return predicate.Data(sql.FieldContainsFold(FieldCity, v))
}

// CountryEQ applies the EQ predicate on the "country" field.
func CountryEQ(v string) predicate.Data {
	return predicate.Data(sql.FieldEQ(FieldCountry, v))
}

// CountryNEQ applies the NEQ predicate on the "country" field.
func CountryNEQ(v string) predicate.Data {
	return predicate.Data(sql.FieldNEQ(FieldCountry, v))
}

// CountryIn applies the In predicate on the "country" field.
func CountryIn(vs ...string) predicate.Data {
	return predicate.Data(sql.FieldIn(FieldCountry, vs...))
}

// CountryNotIn applies the NotIn predicate on the "country" field.
func CountryNotIn(vs ...string) predicate.Data {
	return predicate.Data(sql.FieldNotIn(FieldCountry, vs...))
}

// CountryGT applies the GT predicate on the "country" field.
func CountryGT(v string) predicate.Data {
	return predicate.Data(sql.FieldGT(FieldCountry, v))
}

// CountryGTE applies the GTE predicate on the "country" field.
func CountryGTE(v string) predicate.Data {
	return predicate.Data(sql.FieldGTE(FieldCountry, v))
}

// CountryLT applies the LT predicate on the "country" field.
func CountryLT(v string) predicate.Data {
	return predicate.Data(sql.FieldLT(FieldCountry, v))
}

// CountryLTE applies the LTE predicate on the "country" field.
func CountryLTE(v string) predicate.Data {
	return predicate.Data(sql.FieldLTE(FieldCountry, v))
}

// CountryContains applies the Contains predicate on the "country" field.
func CountryContains(v string) predicate.Data {
	return predicate.Data(sql.FieldContains(FieldCountry, v))
}

// CountryHasPrefix applies the HasPrefix predicate on the "country" field.
func CountryHasPrefix(v string) predicate.Data {
	return predicate.Data(sql.FieldHasPrefix(FieldCountry, v))
}

// CountryHasSuffix applies the HasSuffix predicate on the "country" field.
func CountryHasSuffix(v string) predicate.Data {
	return predicate.Data(sql.FieldHasSuffix(FieldCountry, v))
}

// CountryEqualFold applies the EqualFold predicate on the "country" field.
func CountryEqualFold(v string) predicate.Data {
	return predicate.Data(sql.FieldEqualFold(FieldCountry, v))
}

// CountryContainsFold applies the ContainsFold predicate on the "country" field.
func CountryContainsFold(v string) predicate.Data {
	return predicate.Data(sql.FieldContainsFold(FieldCountry, v))
}

// DetailsEQ applies the EQ predicate on the "details" field.
func DetailsEQ(v string) predicate.Data {
	return predicate.Data(sql.FieldEQ(FieldDetails, v))
}

// DetailsNEQ applies the NEQ predicate on the "details" field.
func DetailsNEQ(v string) predicate.Data {
	return predicate.Data(sql.FieldNEQ(FieldDetails, v))
}

// DetailsIn applies the In predicate on the "details" field.
func DetailsIn(vs ...string) predicate.Data {
	return predicate.Data(sql.FieldIn(FieldDetails, vs...))
}

// DetailsNotIn applies the NotIn predicate on the "details" field.
func DetailsNotIn(vs ...string) predicate.Data {
	return predicate.Data(sql.FieldNotIn(FieldDetails, vs...))
}

// DetailsGT applies the GT predicate on the "details" field.
func DetailsGT(v string) predicate.Data {
	return predicate.Data(sql.FieldGT(FieldDetails, v))
}

// DetailsGTE applies the GTE predicate on the "details" field.
func DetailsGTE(v string) predicate.Data {
	return predicate.Data(sql.FieldGTE(FieldDetails, v))
}

// DetailsLT applies the LT predicate on the "details" field.
func DetailsLT(v string) predicate.Data {
	return predicate.Data(sql.FieldLT(FieldDetails, v))
}

// DetailsLTE applies the LTE predicate on the "details" field.
func DetailsLTE(v string) predicate.Data {
	return predicate.Data(sql.FieldLTE(FieldDetails, v))
}

// DetailsContains applies the Contains predicate on the "details" field.
func DetailsContains(v string) predicate.Data {
	return predicate.Data(sql.FieldContains(FieldDetails, v))
}

// DetailsHasPrefix applies the HasPrefix predicate on the "details" field.
func DetailsHasPrefix(v string) predicate.Data {
	return predicate.Data(sql.FieldHasPrefix(FieldDetails, v))
}

// DetailsHasSuffix applies the HasSuffix predicate on the "details" field.
func DetailsHasSuffix(v string) predicate.Data {
	return predicate.Data(sql.FieldHasSuffix(FieldDetails, v))
}

// DetailsEqualFold applies the EqualFold predicate on the "details" field.
func DetailsEqualFold(v string) predicate.Data {
	return predicate.Data(sql.FieldEqualFold(FieldDetails, v))
}

// DetailsContainsFold applies the ContainsFold predicate on the "details" field.
func DetailsContainsFold(v string) predicate.Data {
	return predicate.Data(sql.FieldContainsFold(FieldDetails, v))
}

// ProviderEQ applies the EQ predicate on the "provider" field.
func ProviderEQ(v string) predicate.Data {
	return predicate.Data(sql.FieldEQ(FieldProvider, v))
}

// ProviderNEQ applies the NEQ predicate on the "provider" field.
func ProviderNEQ(v string) predicate.Data {
	return predicate.Data(sql.FieldNEQ(FieldProvider, v))
}

// ProviderIn applies the In predicate on the "provider" field.
func ProviderIn(vs ...string) predicate.Data {
	return predicate.Data(sql.FieldIn(FieldProvider, vs...))
}

// ProviderNotIn applies the NotIn predicate on the "provider" field.
func ProviderNotIn(vs ...string) predicate.Data {
	return predicate.Data(sql.FieldNotIn(FieldProvider, vs...))
}

// ProviderGT applies the GT predicate on the "provider" field.
func ProviderGT(v string) predicate.Data {
	return predicate.Data(sql.FieldGT(FieldProvider, v))
}

// ProviderGTE applies the GTE predicate on the "provider" field.
func ProviderGTE(v string) predicate.Data {
	return predicate.Data(sql.FieldGTE(FieldProvider, v))
}

// ProviderLT applies the LT predicate on the "provider" field.
func ProviderLT(v string) predicate.Data {
	return predicate.Data(sql.FieldLT(FieldProvider, v))
}

// ProviderLTE applies the LTE predicate on the "provider" field.
func ProviderLTE(v string) predicate.Data {
	return predicate.Data(sql.FieldLTE(FieldProvider, v))
}

// ProviderContains applies the Contains predicate on the "provider" field.
func ProviderContains(v string) predicate.Data {
	return predicate.Data(sql.FieldContains(FieldProvider, v))
}

// ProviderHasPrefix applies the HasPrefix predicate on the "provider" field.
func ProviderHasPrefix(v string) predicate.Data {
	return predicate.Data(sql.FieldHasPrefix(FieldProvider, v))
}

// ProviderHasSuffix applies the HasSuffix predicate on the "provider" field.
func ProviderHasSuffix(v string) predicate.Data {
	return predicate.Data(sql.FieldHasSuffix(FieldProvider, v))
}

// ProviderEqualFold applies the EqualFold predicate on the "provider" field.
func ProviderEqualFold(v string) predicate.Data {
	return predicate.Data(sql.FieldEqualFold(FieldProvider, v))
}

// ProviderContainsFold applies the ContainsFold predicate on the "provider" field.
func ProviderContainsFold(v string) predicate.Data {
	return predicate.Data(sql.FieldContainsFold(FieldProvider, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Data {
	return predicate.Data(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Data {
	return predicate.Data(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Data {
	return predicate.Data(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Data {
	return predicate.Data(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Data {
	return predicate.Data(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Data {
	return predicate.Data(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Data {
	return predicate.Data(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Data {
	return predicate.Data(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Data) predicate.Data {
	return predicate.Data(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Data) predicate.Data {
	return predicate.Data(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Data) predicate.Data {
	return predicate.Data(sql.NotPredicates(p))
}
