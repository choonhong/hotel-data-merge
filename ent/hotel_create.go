// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/choonhong/hotel-data-merge/ent/hotel"
	"github.com/choonhong/hotel-data-merge/ent/schema"
)

// HotelCreate is the builder for creating a Hotel entity.
type HotelCreate struct {
	config
	mutation *HotelMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDestinationID sets the "destination_id" field.
func (hc *HotelCreate) SetDestinationID(i int) *HotelCreate {
	hc.mutation.SetDestinationID(i)
	return hc
}

// SetName sets the "name" field.
func (hc *HotelCreate) SetName(s string) *HotelCreate {
	hc.mutation.SetName(s)
	return hc
}

// SetLatitude sets the "latitude" field.
func (hc *HotelCreate) SetLatitude(f float64) *HotelCreate {
	hc.mutation.SetLatitude(f)
	return hc
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (hc *HotelCreate) SetNillableLatitude(f *float64) *HotelCreate {
	if f != nil {
		hc.SetLatitude(*f)
	}
	return hc
}

// SetLongitude sets the "longitude" field.
func (hc *HotelCreate) SetLongitude(f float64) *HotelCreate {
	hc.mutation.SetLongitude(f)
	return hc
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (hc *HotelCreate) SetNillableLongitude(f *float64) *HotelCreate {
	if f != nil {
		hc.SetLongitude(*f)
	}
	return hc
}

// SetAddress sets the "address" field.
func (hc *HotelCreate) SetAddress(s string) *HotelCreate {
	hc.mutation.SetAddress(s)
	return hc
}

// SetCity sets the "city" field.
func (hc *HotelCreate) SetCity(s string) *HotelCreate {
	hc.mutation.SetCity(s)
	return hc
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (hc *HotelCreate) SetNillableCity(s *string) *HotelCreate {
	if s != nil {
		hc.SetCity(*s)
	}
	return hc
}

// SetCountry sets the "country" field.
func (hc *HotelCreate) SetCountry(s string) *HotelCreate {
	hc.mutation.SetCountry(s)
	return hc
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (hc *HotelCreate) SetNillableCountry(s *string) *HotelCreate {
	if s != nil {
		hc.SetCountry(*s)
	}
	return hc
}

// SetPostalCode sets the "postal_code" field.
func (hc *HotelCreate) SetPostalCode(s string) *HotelCreate {
	hc.mutation.SetPostalCode(s)
	return hc
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (hc *HotelCreate) SetNillablePostalCode(s *string) *HotelCreate {
	if s != nil {
		hc.SetPostalCode(*s)
	}
	return hc
}

// SetDescription sets the "description" field.
func (hc *HotelCreate) SetDescription(s string) *HotelCreate {
	hc.mutation.SetDescription(s)
	return hc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (hc *HotelCreate) SetNillableDescription(s *string) *HotelCreate {
	if s != nil {
		hc.SetDescription(*s)
	}
	return hc
}

// SetAmenities sets the "amenities" field.
func (hc *HotelCreate) SetAmenities(s []string) *HotelCreate {
	hc.mutation.SetAmenities(s)
	return hc
}

// SetImages sets the "images" field.
func (hc *HotelCreate) SetImages(s []schema.Image) *HotelCreate {
	hc.mutation.SetImages(s)
	return hc
}

// SetBookingConditions sets the "booking_conditions" field.
func (hc *HotelCreate) SetBookingConditions(s []string) *HotelCreate {
	hc.mutation.SetBookingConditions(s)
	return hc
}

// SetUpdatedAt sets the "updated_at" field.
func (hc *HotelCreate) SetUpdatedAt(t time.Time) *HotelCreate {
	hc.mutation.SetUpdatedAt(t)
	return hc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hc *HotelCreate) SetNillableUpdatedAt(t *time.Time) *HotelCreate {
	if t != nil {
		hc.SetUpdatedAt(*t)
	}
	return hc
}

// SetID sets the "id" field.
func (hc *HotelCreate) SetID(s string) *HotelCreate {
	hc.mutation.SetID(s)
	return hc
}

// Mutation returns the HotelMutation object of the builder.
func (hc *HotelCreate) Mutation() *HotelMutation {
	return hc.mutation
}

// Save creates the Hotel in the database.
func (hc *HotelCreate) Save(ctx context.Context) (*Hotel, error) {
	hc.defaults()
	return withHooks(ctx, hc.sqlSave, hc.mutation, hc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hc *HotelCreate) SaveX(ctx context.Context) *Hotel {
	v, err := hc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hc *HotelCreate) Exec(ctx context.Context) error {
	_, err := hc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hc *HotelCreate) ExecX(ctx context.Context) {
	if err := hc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hc *HotelCreate) defaults() {
	if _, ok := hc.mutation.UpdatedAt(); !ok {
		v := hotel.DefaultUpdatedAt()
		hc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hc *HotelCreate) check() error {
	if _, ok := hc.mutation.DestinationID(); !ok {
		return &ValidationError{Name: "destination_id", err: errors.New(`ent: missing required field "Hotel.destination_id"`)}
	}
	if _, ok := hc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Hotel.name"`)}
	}
	if _, ok := hc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "Hotel.address"`)}
	}
	if _, ok := hc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Hotel.updated_at"`)}
	}
	return nil
}

func (hc *HotelCreate) sqlSave(ctx context.Context) (*Hotel, error) {
	if err := hc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Hotel.ID type: %T", _spec.ID.Value)
		}
	}
	hc.mutation.id = &_node.ID
	hc.mutation.done = true
	return _node, nil
}

func (hc *HotelCreate) createSpec() (*Hotel, *sqlgraph.CreateSpec) {
	var (
		_node = &Hotel{config: hc.config}
		_spec = sqlgraph.NewCreateSpec(hotel.Table, sqlgraph.NewFieldSpec(hotel.FieldID, field.TypeString))
	)
	_spec.OnConflict = hc.conflict
	if id, ok := hc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := hc.mutation.DestinationID(); ok {
		_spec.SetField(hotel.FieldDestinationID, field.TypeInt, value)
		_node.DestinationID = value
	}
	if value, ok := hc.mutation.Name(); ok {
		_spec.SetField(hotel.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := hc.mutation.Latitude(); ok {
		_spec.SetField(hotel.FieldLatitude, field.TypeFloat64, value)
		_node.Latitude = &value
	}
	if value, ok := hc.mutation.Longitude(); ok {
		_spec.SetField(hotel.FieldLongitude, field.TypeFloat64, value)
		_node.Longitude = &value
	}
	if value, ok := hc.mutation.Address(); ok {
		_spec.SetField(hotel.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := hc.mutation.City(); ok {
		_spec.SetField(hotel.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := hc.mutation.Country(); ok {
		_spec.SetField(hotel.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if value, ok := hc.mutation.PostalCode(); ok {
		_spec.SetField(hotel.FieldPostalCode, field.TypeString, value)
		_node.PostalCode = value
	}
	if value, ok := hc.mutation.Description(); ok {
		_spec.SetField(hotel.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := hc.mutation.Amenities(); ok {
		_spec.SetField(hotel.FieldAmenities, field.TypeJSON, value)
		_node.Amenities = value
	}
	if value, ok := hc.mutation.Images(); ok {
		_spec.SetField(hotel.FieldImages, field.TypeJSON, value)
		_node.Images = value
	}
	if value, ok := hc.mutation.BookingConditions(); ok {
		_spec.SetField(hotel.FieldBookingConditions, field.TypeJSON, value)
		_node.BookingConditions = value
	}
	if value, ok := hc.mutation.UpdatedAt(); ok {
		_spec.SetField(hotel.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Hotel.Create().
//		SetDestinationID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HotelUpsert) {
//			SetDestinationID(v+v).
//		}).
//		Exec(ctx)
func (hc *HotelCreate) OnConflict(opts ...sql.ConflictOption) *HotelUpsertOne {
	hc.conflict = opts
	return &HotelUpsertOne{
		create: hc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Hotel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hc *HotelCreate) OnConflictColumns(columns ...string) *HotelUpsertOne {
	hc.conflict = append(hc.conflict, sql.ConflictColumns(columns...))
	return &HotelUpsertOne{
		create: hc,
	}
}

type (
	// HotelUpsertOne is the builder for "upsert"-ing
	//  one Hotel node.
	HotelUpsertOne struct {
		create *HotelCreate
	}

	// HotelUpsert is the "OnConflict" setter.
	HotelUpsert struct {
		*sql.UpdateSet
	}
)

// SetDestinationID sets the "destination_id" field.
func (u *HotelUpsert) SetDestinationID(v int) *HotelUpsert {
	u.Set(hotel.FieldDestinationID, v)
	return u
}

// UpdateDestinationID sets the "destination_id" field to the value that was provided on create.
func (u *HotelUpsert) UpdateDestinationID() *HotelUpsert {
	u.SetExcluded(hotel.FieldDestinationID)
	return u
}

// AddDestinationID adds v to the "destination_id" field.
func (u *HotelUpsert) AddDestinationID(v int) *HotelUpsert {
	u.Add(hotel.FieldDestinationID, v)
	return u
}

// SetName sets the "name" field.
func (u *HotelUpsert) SetName(v string) *HotelUpsert {
	u.Set(hotel.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *HotelUpsert) UpdateName() *HotelUpsert {
	u.SetExcluded(hotel.FieldName)
	return u
}

// SetLatitude sets the "latitude" field.
func (u *HotelUpsert) SetLatitude(v float64) *HotelUpsert {
	u.Set(hotel.FieldLatitude, v)
	return u
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *HotelUpsert) UpdateLatitude() *HotelUpsert {
	u.SetExcluded(hotel.FieldLatitude)
	return u
}

// AddLatitude adds v to the "latitude" field.
func (u *HotelUpsert) AddLatitude(v float64) *HotelUpsert {
	u.Add(hotel.FieldLatitude, v)
	return u
}

// ClearLatitude clears the value of the "latitude" field.
func (u *HotelUpsert) ClearLatitude() *HotelUpsert {
	u.SetNull(hotel.FieldLatitude)
	return u
}

// SetLongitude sets the "longitude" field.
func (u *HotelUpsert) SetLongitude(v float64) *HotelUpsert {
	u.Set(hotel.FieldLongitude, v)
	return u
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *HotelUpsert) UpdateLongitude() *HotelUpsert {
	u.SetExcluded(hotel.FieldLongitude)
	return u
}

// AddLongitude adds v to the "longitude" field.
func (u *HotelUpsert) AddLongitude(v float64) *HotelUpsert {
	u.Add(hotel.FieldLongitude, v)
	return u
}

// ClearLongitude clears the value of the "longitude" field.
func (u *HotelUpsert) ClearLongitude() *HotelUpsert {
	u.SetNull(hotel.FieldLongitude)
	return u
}

// SetAddress sets the "address" field.
func (u *HotelUpsert) SetAddress(v string) *HotelUpsert {
	u.Set(hotel.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *HotelUpsert) UpdateAddress() *HotelUpsert {
	u.SetExcluded(hotel.FieldAddress)
	return u
}

// SetCity sets the "city" field.
func (u *HotelUpsert) SetCity(v string) *HotelUpsert {
	u.Set(hotel.FieldCity, v)
	return u
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *HotelUpsert) UpdateCity() *HotelUpsert {
	u.SetExcluded(hotel.FieldCity)
	return u
}

// ClearCity clears the value of the "city" field.
func (u *HotelUpsert) ClearCity() *HotelUpsert {
	u.SetNull(hotel.FieldCity)
	return u
}

// SetCountry sets the "country" field.
func (u *HotelUpsert) SetCountry(v string) *HotelUpsert {
	u.Set(hotel.FieldCountry, v)
	return u
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *HotelUpsert) UpdateCountry() *HotelUpsert {
	u.SetExcluded(hotel.FieldCountry)
	return u
}

// ClearCountry clears the value of the "country" field.
func (u *HotelUpsert) ClearCountry() *HotelUpsert {
	u.SetNull(hotel.FieldCountry)
	return u
}

// SetPostalCode sets the "postal_code" field.
func (u *HotelUpsert) SetPostalCode(v string) *HotelUpsert {
	u.Set(hotel.FieldPostalCode, v)
	return u
}

// UpdatePostalCode sets the "postal_code" field to the value that was provided on create.
func (u *HotelUpsert) UpdatePostalCode() *HotelUpsert {
	u.SetExcluded(hotel.FieldPostalCode)
	return u
}

// ClearPostalCode clears the value of the "postal_code" field.
func (u *HotelUpsert) ClearPostalCode() *HotelUpsert {
	u.SetNull(hotel.FieldPostalCode)
	return u
}

// SetDescription sets the "description" field.
func (u *HotelUpsert) SetDescription(v string) *HotelUpsert {
	u.Set(hotel.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *HotelUpsert) UpdateDescription() *HotelUpsert {
	u.SetExcluded(hotel.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *HotelUpsert) ClearDescription() *HotelUpsert {
	u.SetNull(hotel.FieldDescription)
	return u
}

// SetAmenities sets the "amenities" field.
func (u *HotelUpsert) SetAmenities(v []string) *HotelUpsert {
	u.Set(hotel.FieldAmenities, v)
	return u
}

// UpdateAmenities sets the "amenities" field to the value that was provided on create.
func (u *HotelUpsert) UpdateAmenities() *HotelUpsert {
	u.SetExcluded(hotel.FieldAmenities)
	return u
}

// ClearAmenities clears the value of the "amenities" field.
func (u *HotelUpsert) ClearAmenities() *HotelUpsert {
	u.SetNull(hotel.FieldAmenities)
	return u
}

// SetImages sets the "images" field.
func (u *HotelUpsert) SetImages(v []schema.Image) *HotelUpsert {
	u.Set(hotel.FieldImages, v)
	return u
}

// UpdateImages sets the "images" field to the value that was provided on create.
func (u *HotelUpsert) UpdateImages() *HotelUpsert {
	u.SetExcluded(hotel.FieldImages)
	return u
}

// ClearImages clears the value of the "images" field.
func (u *HotelUpsert) ClearImages() *HotelUpsert {
	u.SetNull(hotel.FieldImages)
	return u
}

// SetBookingConditions sets the "booking_conditions" field.
func (u *HotelUpsert) SetBookingConditions(v []string) *HotelUpsert {
	u.Set(hotel.FieldBookingConditions, v)
	return u
}

// UpdateBookingConditions sets the "booking_conditions" field to the value that was provided on create.
func (u *HotelUpsert) UpdateBookingConditions() *HotelUpsert {
	u.SetExcluded(hotel.FieldBookingConditions)
	return u
}

// ClearBookingConditions clears the value of the "booking_conditions" field.
func (u *HotelUpsert) ClearBookingConditions() *HotelUpsert {
	u.SetNull(hotel.FieldBookingConditions)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *HotelUpsert) SetUpdatedAt(v time.Time) *HotelUpsert {
	u.Set(hotel.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HotelUpsert) UpdateUpdatedAt() *HotelUpsert {
	u.SetExcluded(hotel.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Hotel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(hotel.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *HotelUpsertOne) UpdateNewValues() *HotelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(hotel.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Hotel.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *HotelUpsertOne) Ignore() *HotelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HotelUpsertOne) DoNothing() *HotelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HotelCreate.OnConflict
// documentation for more info.
func (u *HotelUpsertOne) Update(set func(*HotelUpsert)) *HotelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HotelUpsert{UpdateSet: update})
	}))
	return u
}

// SetDestinationID sets the "destination_id" field.
func (u *HotelUpsertOne) SetDestinationID(v int) *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.SetDestinationID(v)
	})
}

// AddDestinationID adds v to the "destination_id" field.
func (u *HotelUpsertOne) AddDestinationID(v int) *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.AddDestinationID(v)
	})
}

// UpdateDestinationID sets the "destination_id" field to the value that was provided on create.
func (u *HotelUpsertOne) UpdateDestinationID() *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.UpdateDestinationID()
	})
}

// SetName sets the "name" field.
func (u *HotelUpsertOne) SetName(v string) *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *HotelUpsertOne) UpdateName() *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.UpdateName()
	})
}

// SetLatitude sets the "latitude" field.
func (u *HotelUpsertOne) SetLatitude(v float64) *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.SetLatitude(v)
	})
}

// AddLatitude adds v to the "latitude" field.
func (u *HotelUpsertOne) AddLatitude(v float64) *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.AddLatitude(v)
	})
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *HotelUpsertOne) UpdateLatitude() *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.UpdateLatitude()
	})
}

// ClearLatitude clears the value of the "latitude" field.
func (u *HotelUpsertOne) ClearLatitude() *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.ClearLatitude()
	})
}

// SetLongitude sets the "longitude" field.
func (u *HotelUpsertOne) SetLongitude(v float64) *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.SetLongitude(v)
	})
}

// AddLongitude adds v to the "longitude" field.
func (u *HotelUpsertOne) AddLongitude(v float64) *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.AddLongitude(v)
	})
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *HotelUpsertOne) UpdateLongitude() *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.UpdateLongitude()
	})
}

// ClearLongitude clears the value of the "longitude" field.
func (u *HotelUpsertOne) ClearLongitude() *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.ClearLongitude()
	})
}

// SetAddress sets the "address" field.
func (u *HotelUpsertOne) SetAddress(v string) *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *HotelUpsertOne) UpdateAddress() *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.UpdateAddress()
	})
}

// SetCity sets the "city" field.
func (u *HotelUpsertOne) SetCity(v string) *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *HotelUpsertOne) UpdateCity() *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.UpdateCity()
	})
}

// ClearCity clears the value of the "city" field.
func (u *HotelUpsertOne) ClearCity() *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.ClearCity()
	})
}

// SetCountry sets the "country" field.
func (u *HotelUpsertOne) SetCountry(v string) *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *HotelUpsertOne) UpdateCountry() *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.UpdateCountry()
	})
}

// ClearCountry clears the value of the "country" field.
func (u *HotelUpsertOne) ClearCountry() *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.ClearCountry()
	})
}

// SetPostalCode sets the "postal_code" field.
func (u *HotelUpsertOne) SetPostalCode(v string) *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.SetPostalCode(v)
	})
}

// UpdatePostalCode sets the "postal_code" field to the value that was provided on create.
func (u *HotelUpsertOne) UpdatePostalCode() *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.UpdatePostalCode()
	})
}

// ClearPostalCode clears the value of the "postal_code" field.
func (u *HotelUpsertOne) ClearPostalCode() *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.ClearPostalCode()
	})
}

// SetDescription sets the "description" field.
func (u *HotelUpsertOne) SetDescription(v string) *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *HotelUpsertOne) UpdateDescription() *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *HotelUpsertOne) ClearDescription() *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.ClearDescription()
	})
}

// SetAmenities sets the "amenities" field.
func (u *HotelUpsertOne) SetAmenities(v []string) *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.SetAmenities(v)
	})
}

// UpdateAmenities sets the "amenities" field to the value that was provided on create.
func (u *HotelUpsertOne) UpdateAmenities() *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.UpdateAmenities()
	})
}

// ClearAmenities clears the value of the "amenities" field.
func (u *HotelUpsertOne) ClearAmenities() *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.ClearAmenities()
	})
}

// SetImages sets the "images" field.
func (u *HotelUpsertOne) SetImages(v []schema.Image) *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.SetImages(v)
	})
}

// UpdateImages sets the "images" field to the value that was provided on create.
func (u *HotelUpsertOne) UpdateImages() *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.UpdateImages()
	})
}

// ClearImages clears the value of the "images" field.
func (u *HotelUpsertOne) ClearImages() *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.ClearImages()
	})
}

// SetBookingConditions sets the "booking_conditions" field.
func (u *HotelUpsertOne) SetBookingConditions(v []string) *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.SetBookingConditions(v)
	})
}

// UpdateBookingConditions sets the "booking_conditions" field to the value that was provided on create.
func (u *HotelUpsertOne) UpdateBookingConditions() *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.UpdateBookingConditions()
	})
}

// ClearBookingConditions clears the value of the "booking_conditions" field.
func (u *HotelUpsertOne) ClearBookingConditions() *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.ClearBookingConditions()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *HotelUpsertOne) SetUpdatedAt(v time.Time) *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HotelUpsertOne) UpdateUpdatedAt() *HotelUpsertOne {
	return u.Update(func(s *HotelUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *HotelUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HotelCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HotelUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *HotelUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: HotelUpsertOne.ID is not supported by MySQL driver. Use HotelUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *HotelUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// HotelCreateBulk is the builder for creating many Hotel entities in bulk.
type HotelCreateBulk struct {
	config
	err      error
	builders []*HotelCreate
	conflict []sql.ConflictOption
}

// Save creates the Hotel entities in the database.
func (hcb *HotelCreateBulk) Save(ctx context.Context) ([]*Hotel, error) {
	if hcb.err != nil {
		return nil, hcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(hcb.builders))
	nodes := make([]*Hotel, len(hcb.builders))
	mutators := make([]Mutator, len(hcb.builders))
	for i := range hcb.builders {
		func(i int, root context.Context) {
			builder := hcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HotelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = hcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hcb *HotelCreateBulk) SaveX(ctx context.Context) []*Hotel {
	v, err := hcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hcb *HotelCreateBulk) Exec(ctx context.Context) error {
	_, err := hcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcb *HotelCreateBulk) ExecX(ctx context.Context) {
	if err := hcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Hotel.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HotelUpsert) {
//			SetDestinationID(v+v).
//		}).
//		Exec(ctx)
func (hcb *HotelCreateBulk) OnConflict(opts ...sql.ConflictOption) *HotelUpsertBulk {
	hcb.conflict = opts
	return &HotelUpsertBulk{
		create: hcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Hotel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hcb *HotelCreateBulk) OnConflictColumns(columns ...string) *HotelUpsertBulk {
	hcb.conflict = append(hcb.conflict, sql.ConflictColumns(columns...))
	return &HotelUpsertBulk{
		create: hcb,
	}
}

// HotelUpsertBulk is the builder for "upsert"-ing
// a bulk of Hotel nodes.
type HotelUpsertBulk struct {
	create *HotelCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Hotel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(hotel.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *HotelUpsertBulk) UpdateNewValues() *HotelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(hotel.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Hotel.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *HotelUpsertBulk) Ignore() *HotelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HotelUpsertBulk) DoNothing() *HotelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HotelCreateBulk.OnConflict
// documentation for more info.
func (u *HotelUpsertBulk) Update(set func(*HotelUpsert)) *HotelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HotelUpsert{UpdateSet: update})
	}))
	return u
}

// SetDestinationID sets the "destination_id" field.
func (u *HotelUpsertBulk) SetDestinationID(v int) *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.SetDestinationID(v)
	})
}

// AddDestinationID adds v to the "destination_id" field.
func (u *HotelUpsertBulk) AddDestinationID(v int) *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.AddDestinationID(v)
	})
}

// UpdateDestinationID sets the "destination_id" field to the value that was provided on create.
func (u *HotelUpsertBulk) UpdateDestinationID() *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.UpdateDestinationID()
	})
}

// SetName sets the "name" field.
func (u *HotelUpsertBulk) SetName(v string) *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *HotelUpsertBulk) UpdateName() *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.UpdateName()
	})
}

// SetLatitude sets the "latitude" field.
func (u *HotelUpsertBulk) SetLatitude(v float64) *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.SetLatitude(v)
	})
}

// AddLatitude adds v to the "latitude" field.
func (u *HotelUpsertBulk) AddLatitude(v float64) *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.AddLatitude(v)
	})
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *HotelUpsertBulk) UpdateLatitude() *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.UpdateLatitude()
	})
}

// ClearLatitude clears the value of the "latitude" field.
func (u *HotelUpsertBulk) ClearLatitude() *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.ClearLatitude()
	})
}

// SetLongitude sets the "longitude" field.
func (u *HotelUpsertBulk) SetLongitude(v float64) *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.SetLongitude(v)
	})
}

// AddLongitude adds v to the "longitude" field.
func (u *HotelUpsertBulk) AddLongitude(v float64) *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.AddLongitude(v)
	})
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *HotelUpsertBulk) UpdateLongitude() *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.UpdateLongitude()
	})
}

// ClearLongitude clears the value of the "longitude" field.
func (u *HotelUpsertBulk) ClearLongitude() *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.ClearLongitude()
	})
}

// SetAddress sets the "address" field.
func (u *HotelUpsertBulk) SetAddress(v string) *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *HotelUpsertBulk) UpdateAddress() *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.UpdateAddress()
	})
}

// SetCity sets the "city" field.
func (u *HotelUpsertBulk) SetCity(v string) *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *HotelUpsertBulk) UpdateCity() *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.UpdateCity()
	})
}

// ClearCity clears the value of the "city" field.
func (u *HotelUpsertBulk) ClearCity() *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.ClearCity()
	})
}

// SetCountry sets the "country" field.
func (u *HotelUpsertBulk) SetCountry(v string) *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *HotelUpsertBulk) UpdateCountry() *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.UpdateCountry()
	})
}

// ClearCountry clears the value of the "country" field.
func (u *HotelUpsertBulk) ClearCountry() *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.ClearCountry()
	})
}

// SetPostalCode sets the "postal_code" field.
func (u *HotelUpsertBulk) SetPostalCode(v string) *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.SetPostalCode(v)
	})
}

// UpdatePostalCode sets the "postal_code" field to the value that was provided on create.
func (u *HotelUpsertBulk) UpdatePostalCode() *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.UpdatePostalCode()
	})
}

// ClearPostalCode clears the value of the "postal_code" field.
func (u *HotelUpsertBulk) ClearPostalCode() *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.ClearPostalCode()
	})
}

// SetDescription sets the "description" field.
func (u *HotelUpsertBulk) SetDescription(v string) *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *HotelUpsertBulk) UpdateDescription() *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *HotelUpsertBulk) ClearDescription() *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.ClearDescription()
	})
}

// SetAmenities sets the "amenities" field.
func (u *HotelUpsertBulk) SetAmenities(v []string) *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.SetAmenities(v)
	})
}

// UpdateAmenities sets the "amenities" field to the value that was provided on create.
func (u *HotelUpsertBulk) UpdateAmenities() *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.UpdateAmenities()
	})
}

// ClearAmenities clears the value of the "amenities" field.
func (u *HotelUpsertBulk) ClearAmenities() *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.ClearAmenities()
	})
}

// SetImages sets the "images" field.
func (u *HotelUpsertBulk) SetImages(v []schema.Image) *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.SetImages(v)
	})
}

// UpdateImages sets the "images" field to the value that was provided on create.
func (u *HotelUpsertBulk) UpdateImages() *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.UpdateImages()
	})
}

// ClearImages clears the value of the "images" field.
func (u *HotelUpsertBulk) ClearImages() *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.ClearImages()
	})
}

// SetBookingConditions sets the "booking_conditions" field.
func (u *HotelUpsertBulk) SetBookingConditions(v []string) *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.SetBookingConditions(v)
	})
}

// UpdateBookingConditions sets the "booking_conditions" field to the value that was provided on create.
func (u *HotelUpsertBulk) UpdateBookingConditions() *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.UpdateBookingConditions()
	})
}

// ClearBookingConditions clears the value of the "booking_conditions" field.
func (u *HotelUpsertBulk) ClearBookingConditions() *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.ClearBookingConditions()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *HotelUpsertBulk) SetUpdatedAt(v time.Time) *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *HotelUpsertBulk) UpdateUpdatedAt() *HotelUpsertBulk {
	return u.Update(func(s *HotelUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *HotelUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the HotelCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HotelCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HotelUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
