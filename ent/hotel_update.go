// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/choonhong/hotel-data-merge/ent/hotel"
	"github.com/choonhong/hotel-data-merge/ent/predicate"
	"github.com/choonhong/hotel-data-merge/ent/schema"
)

// HotelUpdate is the builder for updating Hotel entities.
type HotelUpdate struct {
	config
	hooks    []Hook
	mutation *HotelMutation
}

// Where appends a list predicates to the HotelUpdate builder.
func (hu *HotelUpdate) Where(ps ...predicate.Hotel) *HotelUpdate {
	hu.mutation.Where(ps...)
	return hu
}

// SetDestinationID sets the "destination_id" field.
func (hu *HotelUpdate) SetDestinationID(i int) *HotelUpdate {
	hu.mutation.ResetDestinationID()
	hu.mutation.SetDestinationID(i)
	return hu
}

// SetNillableDestinationID sets the "destination_id" field if the given value is not nil.
func (hu *HotelUpdate) SetNillableDestinationID(i *int) *HotelUpdate {
	if i != nil {
		hu.SetDestinationID(*i)
	}
	return hu
}

// AddDestinationID adds i to the "destination_id" field.
func (hu *HotelUpdate) AddDestinationID(i int) *HotelUpdate {
	hu.mutation.AddDestinationID(i)
	return hu
}

// SetName sets the "name" field.
func (hu *HotelUpdate) SetName(s string) *HotelUpdate {
	hu.mutation.SetName(s)
	return hu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (hu *HotelUpdate) SetNillableName(s *string) *HotelUpdate {
	if s != nil {
		hu.SetName(*s)
	}
	return hu
}

// SetLatitude sets the "latitude" field.
func (hu *HotelUpdate) SetLatitude(f float64) *HotelUpdate {
	hu.mutation.ResetLatitude()
	hu.mutation.SetLatitude(f)
	return hu
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (hu *HotelUpdate) SetNillableLatitude(f *float64) *HotelUpdate {
	if f != nil {
		hu.SetLatitude(*f)
	}
	return hu
}

// AddLatitude adds f to the "latitude" field.
func (hu *HotelUpdate) AddLatitude(f float64) *HotelUpdate {
	hu.mutation.AddLatitude(f)
	return hu
}

// ClearLatitude clears the value of the "latitude" field.
func (hu *HotelUpdate) ClearLatitude() *HotelUpdate {
	hu.mutation.ClearLatitude()
	return hu
}

// SetLongitude sets the "longitude" field.
func (hu *HotelUpdate) SetLongitude(f float64) *HotelUpdate {
	hu.mutation.ResetLongitude()
	hu.mutation.SetLongitude(f)
	return hu
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (hu *HotelUpdate) SetNillableLongitude(f *float64) *HotelUpdate {
	if f != nil {
		hu.SetLongitude(*f)
	}
	return hu
}

// AddLongitude adds f to the "longitude" field.
func (hu *HotelUpdate) AddLongitude(f float64) *HotelUpdate {
	hu.mutation.AddLongitude(f)
	return hu
}

// ClearLongitude clears the value of the "longitude" field.
func (hu *HotelUpdate) ClearLongitude() *HotelUpdate {
	hu.mutation.ClearLongitude()
	return hu
}

// SetAddress sets the "address" field.
func (hu *HotelUpdate) SetAddress(s string) *HotelUpdate {
	hu.mutation.SetAddress(s)
	return hu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (hu *HotelUpdate) SetNillableAddress(s *string) *HotelUpdate {
	if s != nil {
		hu.SetAddress(*s)
	}
	return hu
}

// SetCity sets the "city" field.
func (hu *HotelUpdate) SetCity(s string) *HotelUpdate {
	hu.mutation.SetCity(s)
	return hu
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (hu *HotelUpdate) SetNillableCity(s *string) *HotelUpdate {
	if s != nil {
		hu.SetCity(*s)
	}
	return hu
}

// ClearCity clears the value of the "city" field.
func (hu *HotelUpdate) ClearCity() *HotelUpdate {
	hu.mutation.ClearCity()
	return hu
}

// SetCountry sets the "country" field.
func (hu *HotelUpdate) SetCountry(s string) *HotelUpdate {
	hu.mutation.SetCountry(s)
	return hu
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (hu *HotelUpdate) SetNillableCountry(s *string) *HotelUpdate {
	if s != nil {
		hu.SetCountry(*s)
	}
	return hu
}

// ClearCountry clears the value of the "country" field.
func (hu *HotelUpdate) ClearCountry() *HotelUpdate {
	hu.mutation.ClearCountry()
	return hu
}

// SetPostalCode sets the "postal_code" field.
func (hu *HotelUpdate) SetPostalCode(s string) *HotelUpdate {
	hu.mutation.SetPostalCode(s)
	return hu
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (hu *HotelUpdate) SetNillablePostalCode(s *string) *HotelUpdate {
	if s != nil {
		hu.SetPostalCode(*s)
	}
	return hu
}

// ClearPostalCode clears the value of the "postal_code" field.
func (hu *HotelUpdate) ClearPostalCode() *HotelUpdate {
	hu.mutation.ClearPostalCode()
	return hu
}

// SetDescription sets the "description" field.
func (hu *HotelUpdate) SetDescription(s string) *HotelUpdate {
	hu.mutation.SetDescription(s)
	return hu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (hu *HotelUpdate) SetNillableDescription(s *string) *HotelUpdate {
	if s != nil {
		hu.SetDescription(*s)
	}
	return hu
}

// ClearDescription clears the value of the "description" field.
func (hu *HotelUpdate) ClearDescription() *HotelUpdate {
	hu.mutation.ClearDescription()
	return hu
}

// SetAmenities sets the "amenities" field.
func (hu *HotelUpdate) SetAmenities(s []string) *HotelUpdate {
	hu.mutation.SetAmenities(s)
	return hu
}

// AppendAmenities appends s to the "amenities" field.
func (hu *HotelUpdate) AppendAmenities(s []string) *HotelUpdate {
	hu.mutation.AppendAmenities(s)
	return hu
}

// ClearAmenities clears the value of the "amenities" field.
func (hu *HotelUpdate) ClearAmenities() *HotelUpdate {
	hu.mutation.ClearAmenities()
	return hu
}

// SetImages sets the "images" field.
func (hu *HotelUpdate) SetImages(s []schema.Image) *HotelUpdate {
	hu.mutation.SetImages(s)
	return hu
}

// AppendImages appends s to the "images" field.
func (hu *HotelUpdate) AppendImages(s []schema.Image) *HotelUpdate {
	hu.mutation.AppendImages(s)
	return hu
}

// ClearImages clears the value of the "images" field.
func (hu *HotelUpdate) ClearImages() *HotelUpdate {
	hu.mutation.ClearImages()
	return hu
}

// SetBookingConditions sets the "booking_conditions" field.
func (hu *HotelUpdate) SetBookingConditions(s []string) *HotelUpdate {
	hu.mutation.SetBookingConditions(s)
	return hu
}

// AppendBookingConditions appends s to the "booking_conditions" field.
func (hu *HotelUpdate) AppendBookingConditions(s []string) *HotelUpdate {
	hu.mutation.AppendBookingConditions(s)
	return hu
}

// ClearBookingConditions clears the value of the "booking_conditions" field.
func (hu *HotelUpdate) ClearBookingConditions() *HotelUpdate {
	hu.mutation.ClearBookingConditions()
	return hu
}

// SetUpdatedAt sets the "updated_at" field.
func (hu *HotelUpdate) SetUpdatedAt(t time.Time) *HotelUpdate {
	hu.mutation.SetUpdatedAt(t)
	return hu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hu *HotelUpdate) SetNillableUpdatedAt(t *time.Time) *HotelUpdate {
	if t != nil {
		hu.SetUpdatedAt(*t)
	}
	return hu
}

// Mutation returns the HotelMutation object of the builder.
func (hu *HotelUpdate) Mutation() *HotelMutation {
	return hu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HotelUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, hu.sqlSave, hu.mutation, hu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HotelUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HotelUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HotelUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hu *HotelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(hotel.Table, hotel.Columns, sqlgraph.NewFieldSpec(hotel.FieldID, field.TypeString))
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.DestinationID(); ok {
		_spec.SetField(hotel.FieldDestinationID, field.TypeInt, value)
	}
	if value, ok := hu.mutation.AddedDestinationID(); ok {
		_spec.AddField(hotel.FieldDestinationID, field.TypeInt, value)
	}
	if value, ok := hu.mutation.Name(); ok {
		_spec.SetField(hotel.FieldName, field.TypeString, value)
	}
	if value, ok := hu.mutation.Latitude(); ok {
		_spec.SetField(hotel.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := hu.mutation.AddedLatitude(); ok {
		_spec.AddField(hotel.FieldLatitude, field.TypeFloat64, value)
	}
	if hu.mutation.LatitudeCleared() {
		_spec.ClearField(hotel.FieldLatitude, field.TypeFloat64)
	}
	if value, ok := hu.mutation.Longitude(); ok {
		_spec.SetField(hotel.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := hu.mutation.AddedLongitude(); ok {
		_spec.AddField(hotel.FieldLongitude, field.TypeFloat64, value)
	}
	if hu.mutation.LongitudeCleared() {
		_spec.ClearField(hotel.FieldLongitude, field.TypeFloat64)
	}
	if value, ok := hu.mutation.Address(); ok {
		_spec.SetField(hotel.FieldAddress, field.TypeString, value)
	}
	if value, ok := hu.mutation.City(); ok {
		_spec.SetField(hotel.FieldCity, field.TypeString, value)
	}
	if hu.mutation.CityCleared() {
		_spec.ClearField(hotel.FieldCity, field.TypeString)
	}
	if value, ok := hu.mutation.Country(); ok {
		_spec.SetField(hotel.FieldCountry, field.TypeString, value)
	}
	if hu.mutation.CountryCleared() {
		_spec.ClearField(hotel.FieldCountry, field.TypeString)
	}
	if value, ok := hu.mutation.PostalCode(); ok {
		_spec.SetField(hotel.FieldPostalCode, field.TypeString, value)
	}
	if hu.mutation.PostalCodeCleared() {
		_spec.ClearField(hotel.FieldPostalCode, field.TypeString)
	}
	if value, ok := hu.mutation.Description(); ok {
		_spec.SetField(hotel.FieldDescription, field.TypeString, value)
	}
	if hu.mutation.DescriptionCleared() {
		_spec.ClearField(hotel.FieldDescription, field.TypeString)
	}
	if value, ok := hu.mutation.Amenities(); ok {
		_spec.SetField(hotel.FieldAmenities, field.TypeJSON, value)
	}
	if value, ok := hu.mutation.AppendedAmenities(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, hotel.FieldAmenities, value)
		})
	}
	if hu.mutation.AmenitiesCleared() {
		_spec.ClearField(hotel.FieldAmenities, field.TypeJSON)
	}
	if value, ok := hu.mutation.Images(); ok {
		_spec.SetField(hotel.FieldImages, field.TypeJSON, value)
	}
	if value, ok := hu.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, hotel.FieldImages, value)
		})
	}
	if hu.mutation.ImagesCleared() {
		_spec.ClearField(hotel.FieldImages, field.TypeJSON)
	}
	if value, ok := hu.mutation.BookingConditions(); ok {
		_spec.SetField(hotel.FieldBookingConditions, field.TypeJSON, value)
	}
	if value, ok := hu.mutation.AppendedBookingConditions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, hotel.FieldBookingConditions, value)
		})
	}
	if hu.mutation.BookingConditionsCleared() {
		_spec.ClearField(hotel.FieldBookingConditions, field.TypeJSON)
	}
	if value, ok := hu.mutation.UpdatedAt(); ok {
		_spec.SetField(hotel.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hotel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hu.mutation.done = true
	return n, nil
}

// HotelUpdateOne is the builder for updating a single Hotel entity.
type HotelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HotelMutation
}

// SetDestinationID sets the "destination_id" field.
func (huo *HotelUpdateOne) SetDestinationID(i int) *HotelUpdateOne {
	huo.mutation.ResetDestinationID()
	huo.mutation.SetDestinationID(i)
	return huo
}

// SetNillableDestinationID sets the "destination_id" field if the given value is not nil.
func (huo *HotelUpdateOne) SetNillableDestinationID(i *int) *HotelUpdateOne {
	if i != nil {
		huo.SetDestinationID(*i)
	}
	return huo
}

// AddDestinationID adds i to the "destination_id" field.
func (huo *HotelUpdateOne) AddDestinationID(i int) *HotelUpdateOne {
	huo.mutation.AddDestinationID(i)
	return huo
}

// SetName sets the "name" field.
func (huo *HotelUpdateOne) SetName(s string) *HotelUpdateOne {
	huo.mutation.SetName(s)
	return huo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (huo *HotelUpdateOne) SetNillableName(s *string) *HotelUpdateOne {
	if s != nil {
		huo.SetName(*s)
	}
	return huo
}

// SetLatitude sets the "latitude" field.
func (huo *HotelUpdateOne) SetLatitude(f float64) *HotelUpdateOne {
	huo.mutation.ResetLatitude()
	huo.mutation.SetLatitude(f)
	return huo
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (huo *HotelUpdateOne) SetNillableLatitude(f *float64) *HotelUpdateOne {
	if f != nil {
		huo.SetLatitude(*f)
	}
	return huo
}

// AddLatitude adds f to the "latitude" field.
func (huo *HotelUpdateOne) AddLatitude(f float64) *HotelUpdateOne {
	huo.mutation.AddLatitude(f)
	return huo
}

// ClearLatitude clears the value of the "latitude" field.
func (huo *HotelUpdateOne) ClearLatitude() *HotelUpdateOne {
	huo.mutation.ClearLatitude()
	return huo
}

// SetLongitude sets the "longitude" field.
func (huo *HotelUpdateOne) SetLongitude(f float64) *HotelUpdateOne {
	huo.mutation.ResetLongitude()
	huo.mutation.SetLongitude(f)
	return huo
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (huo *HotelUpdateOne) SetNillableLongitude(f *float64) *HotelUpdateOne {
	if f != nil {
		huo.SetLongitude(*f)
	}
	return huo
}

// AddLongitude adds f to the "longitude" field.
func (huo *HotelUpdateOne) AddLongitude(f float64) *HotelUpdateOne {
	huo.mutation.AddLongitude(f)
	return huo
}

// ClearLongitude clears the value of the "longitude" field.
func (huo *HotelUpdateOne) ClearLongitude() *HotelUpdateOne {
	huo.mutation.ClearLongitude()
	return huo
}

// SetAddress sets the "address" field.
func (huo *HotelUpdateOne) SetAddress(s string) *HotelUpdateOne {
	huo.mutation.SetAddress(s)
	return huo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (huo *HotelUpdateOne) SetNillableAddress(s *string) *HotelUpdateOne {
	if s != nil {
		huo.SetAddress(*s)
	}
	return huo
}

// SetCity sets the "city" field.
func (huo *HotelUpdateOne) SetCity(s string) *HotelUpdateOne {
	huo.mutation.SetCity(s)
	return huo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (huo *HotelUpdateOne) SetNillableCity(s *string) *HotelUpdateOne {
	if s != nil {
		huo.SetCity(*s)
	}
	return huo
}

// ClearCity clears the value of the "city" field.
func (huo *HotelUpdateOne) ClearCity() *HotelUpdateOne {
	huo.mutation.ClearCity()
	return huo
}

// SetCountry sets the "country" field.
func (huo *HotelUpdateOne) SetCountry(s string) *HotelUpdateOne {
	huo.mutation.SetCountry(s)
	return huo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (huo *HotelUpdateOne) SetNillableCountry(s *string) *HotelUpdateOne {
	if s != nil {
		huo.SetCountry(*s)
	}
	return huo
}

// ClearCountry clears the value of the "country" field.
func (huo *HotelUpdateOne) ClearCountry() *HotelUpdateOne {
	huo.mutation.ClearCountry()
	return huo
}

// SetPostalCode sets the "postal_code" field.
func (huo *HotelUpdateOne) SetPostalCode(s string) *HotelUpdateOne {
	huo.mutation.SetPostalCode(s)
	return huo
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (huo *HotelUpdateOne) SetNillablePostalCode(s *string) *HotelUpdateOne {
	if s != nil {
		huo.SetPostalCode(*s)
	}
	return huo
}

// ClearPostalCode clears the value of the "postal_code" field.
func (huo *HotelUpdateOne) ClearPostalCode() *HotelUpdateOne {
	huo.mutation.ClearPostalCode()
	return huo
}

// SetDescription sets the "description" field.
func (huo *HotelUpdateOne) SetDescription(s string) *HotelUpdateOne {
	huo.mutation.SetDescription(s)
	return huo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (huo *HotelUpdateOne) SetNillableDescription(s *string) *HotelUpdateOne {
	if s != nil {
		huo.SetDescription(*s)
	}
	return huo
}

// ClearDescription clears the value of the "description" field.
func (huo *HotelUpdateOne) ClearDescription() *HotelUpdateOne {
	huo.mutation.ClearDescription()
	return huo
}

// SetAmenities sets the "amenities" field.
func (huo *HotelUpdateOne) SetAmenities(s []string) *HotelUpdateOne {
	huo.mutation.SetAmenities(s)
	return huo
}

// AppendAmenities appends s to the "amenities" field.
func (huo *HotelUpdateOne) AppendAmenities(s []string) *HotelUpdateOne {
	huo.mutation.AppendAmenities(s)
	return huo
}

// ClearAmenities clears the value of the "amenities" field.
func (huo *HotelUpdateOne) ClearAmenities() *HotelUpdateOne {
	huo.mutation.ClearAmenities()
	return huo
}

// SetImages sets the "images" field.
func (huo *HotelUpdateOne) SetImages(s []schema.Image) *HotelUpdateOne {
	huo.mutation.SetImages(s)
	return huo
}

// AppendImages appends s to the "images" field.
func (huo *HotelUpdateOne) AppendImages(s []schema.Image) *HotelUpdateOne {
	huo.mutation.AppendImages(s)
	return huo
}

// ClearImages clears the value of the "images" field.
func (huo *HotelUpdateOne) ClearImages() *HotelUpdateOne {
	huo.mutation.ClearImages()
	return huo
}

// SetBookingConditions sets the "booking_conditions" field.
func (huo *HotelUpdateOne) SetBookingConditions(s []string) *HotelUpdateOne {
	huo.mutation.SetBookingConditions(s)
	return huo
}

// AppendBookingConditions appends s to the "booking_conditions" field.
func (huo *HotelUpdateOne) AppendBookingConditions(s []string) *HotelUpdateOne {
	huo.mutation.AppendBookingConditions(s)
	return huo
}

// ClearBookingConditions clears the value of the "booking_conditions" field.
func (huo *HotelUpdateOne) ClearBookingConditions() *HotelUpdateOne {
	huo.mutation.ClearBookingConditions()
	return huo
}

// SetUpdatedAt sets the "updated_at" field.
func (huo *HotelUpdateOne) SetUpdatedAt(t time.Time) *HotelUpdateOne {
	huo.mutation.SetUpdatedAt(t)
	return huo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (huo *HotelUpdateOne) SetNillableUpdatedAt(t *time.Time) *HotelUpdateOne {
	if t != nil {
		huo.SetUpdatedAt(*t)
	}
	return huo
}

// Mutation returns the HotelMutation object of the builder.
func (huo *HotelUpdateOne) Mutation() *HotelMutation {
	return huo.mutation
}

// Where appends a list predicates to the HotelUpdate builder.
func (huo *HotelUpdateOne) Where(ps ...predicate.Hotel) *HotelUpdateOne {
	huo.mutation.Where(ps...)
	return huo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (huo *HotelUpdateOne) Select(field string, fields ...string) *HotelUpdateOne {
	huo.fields = append([]string{field}, fields...)
	return huo
}

// Save executes the query and returns the updated Hotel entity.
func (huo *HotelUpdateOne) Save(ctx context.Context) (*Hotel, error) {
	return withHooks(ctx, huo.sqlSave, huo.mutation, huo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HotelUpdateOne) SaveX(ctx context.Context) *Hotel {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HotelUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HotelUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (huo *HotelUpdateOne) sqlSave(ctx context.Context) (_node *Hotel, err error) {
	_spec := sqlgraph.NewUpdateSpec(hotel.Table, hotel.Columns, sqlgraph.NewFieldSpec(hotel.FieldID, field.TypeString))
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Hotel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := huo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hotel.FieldID)
		for _, f := range fields {
			if !hotel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hotel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := huo.mutation.DestinationID(); ok {
		_spec.SetField(hotel.FieldDestinationID, field.TypeInt, value)
	}
	if value, ok := huo.mutation.AddedDestinationID(); ok {
		_spec.AddField(hotel.FieldDestinationID, field.TypeInt, value)
	}
	if value, ok := huo.mutation.Name(); ok {
		_spec.SetField(hotel.FieldName, field.TypeString, value)
	}
	if value, ok := huo.mutation.Latitude(); ok {
		_spec.SetField(hotel.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := huo.mutation.AddedLatitude(); ok {
		_spec.AddField(hotel.FieldLatitude, field.TypeFloat64, value)
	}
	if huo.mutation.LatitudeCleared() {
		_spec.ClearField(hotel.FieldLatitude, field.TypeFloat64)
	}
	if value, ok := huo.mutation.Longitude(); ok {
		_spec.SetField(hotel.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := huo.mutation.AddedLongitude(); ok {
		_spec.AddField(hotel.FieldLongitude, field.TypeFloat64, value)
	}
	if huo.mutation.LongitudeCleared() {
		_spec.ClearField(hotel.FieldLongitude, field.TypeFloat64)
	}
	if value, ok := huo.mutation.Address(); ok {
		_spec.SetField(hotel.FieldAddress, field.TypeString, value)
	}
	if value, ok := huo.mutation.City(); ok {
		_spec.SetField(hotel.FieldCity, field.TypeString, value)
	}
	if huo.mutation.CityCleared() {
		_spec.ClearField(hotel.FieldCity, field.TypeString)
	}
	if value, ok := huo.mutation.Country(); ok {
		_spec.SetField(hotel.FieldCountry, field.TypeString, value)
	}
	if huo.mutation.CountryCleared() {
		_spec.ClearField(hotel.FieldCountry, field.TypeString)
	}
	if value, ok := huo.mutation.PostalCode(); ok {
		_spec.SetField(hotel.FieldPostalCode, field.TypeString, value)
	}
	if huo.mutation.PostalCodeCleared() {
		_spec.ClearField(hotel.FieldPostalCode, field.TypeString)
	}
	if value, ok := huo.mutation.Description(); ok {
		_spec.SetField(hotel.FieldDescription, field.TypeString, value)
	}
	if huo.mutation.DescriptionCleared() {
		_spec.ClearField(hotel.FieldDescription, field.TypeString)
	}
	if value, ok := huo.mutation.Amenities(); ok {
		_spec.SetField(hotel.FieldAmenities, field.TypeJSON, value)
	}
	if value, ok := huo.mutation.AppendedAmenities(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, hotel.FieldAmenities, value)
		})
	}
	if huo.mutation.AmenitiesCleared() {
		_spec.ClearField(hotel.FieldAmenities, field.TypeJSON)
	}
	if value, ok := huo.mutation.Images(); ok {
		_spec.SetField(hotel.FieldImages, field.TypeJSON, value)
	}
	if value, ok := huo.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, hotel.FieldImages, value)
		})
	}
	if huo.mutation.ImagesCleared() {
		_spec.ClearField(hotel.FieldImages, field.TypeJSON)
	}
	if value, ok := huo.mutation.BookingConditions(); ok {
		_spec.SetField(hotel.FieldBookingConditions, field.TypeJSON, value)
	}
	if value, ok := huo.mutation.AppendedBookingConditions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, hotel.FieldBookingConditions, value)
		})
	}
	if huo.mutation.BookingConditionsCleared() {
		_spec.ClearField(hotel.FieldBookingConditions, field.TypeJSON)
	}
	if value, ok := huo.mutation.UpdatedAt(); ok {
		_spec.SetField(hotel.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Hotel{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hotel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	huo.mutation.done = true
	return _node, nil
}
