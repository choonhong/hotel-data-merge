// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/choonhong/hotel-data-merge/domain"
	"github.com/choonhong/hotel-data-merge/ent/data"
	"github.com/choonhong/hotel-data-merge/ent/predicate"
)

// DataUpdate is the builder for updating Data entities.
type DataUpdate struct {
	config
	hooks    []Hook
	mutation *DataMutation
}

// Where appends a list predicates to the DataUpdate builder.
func (du *DataUpdate) Where(ps ...predicate.Data) *DataUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetDestinationID sets the "destination_id" field.
func (du *DataUpdate) SetDestinationID(s string) *DataUpdate {
	du.mutation.SetDestinationID(s)
	return du
}

// SetNillableDestinationID sets the "destination_id" field if the given value is not nil.
func (du *DataUpdate) SetNillableDestinationID(s *string) *DataUpdate {
	if s != nil {
		du.SetDestinationID(*s)
	}
	return du
}

// SetName sets the "name" field.
func (du *DataUpdate) SetName(s string) *DataUpdate {
	du.mutation.SetName(s)
	return du
}

// SetNillableName sets the "name" field if the given value is not nil.
func (du *DataUpdate) SetNillableName(s *string) *DataUpdate {
	if s != nil {
		du.SetName(*s)
	}
	return du
}

// SetLatitude sets the "latitude" field.
func (du *DataUpdate) SetLatitude(f float64) *DataUpdate {
	du.mutation.ResetLatitude()
	du.mutation.SetLatitude(f)
	return du
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (du *DataUpdate) SetNillableLatitude(f *float64) *DataUpdate {
	if f != nil {
		du.SetLatitude(*f)
	}
	return du
}

// AddLatitude adds f to the "latitude" field.
func (du *DataUpdate) AddLatitude(f float64) *DataUpdate {
	du.mutation.AddLatitude(f)
	return du
}

// SetLongitude sets the "longitude" field.
func (du *DataUpdate) SetLongitude(f float64) *DataUpdate {
	du.mutation.ResetLongitude()
	du.mutation.SetLongitude(f)
	return du
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (du *DataUpdate) SetNillableLongitude(f *float64) *DataUpdate {
	if f != nil {
		du.SetLongitude(*f)
	}
	return du
}

// AddLongitude adds f to the "longitude" field.
func (du *DataUpdate) AddLongitude(f float64) *DataUpdate {
	du.mutation.AddLongitude(f)
	return du
}

// SetAddress sets the "address" field.
func (du *DataUpdate) SetAddress(s string) *DataUpdate {
	du.mutation.SetAddress(s)
	return du
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (du *DataUpdate) SetNillableAddress(s *string) *DataUpdate {
	if s != nil {
		du.SetAddress(*s)
	}
	return du
}

// SetCity sets the "city" field.
func (du *DataUpdate) SetCity(s string) *DataUpdate {
	du.mutation.SetCity(s)
	return du
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (du *DataUpdate) SetNillableCity(s *string) *DataUpdate {
	if s != nil {
		du.SetCity(*s)
	}
	return du
}

// SetCountry sets the "country" field.
func (du *DataUpdate) SetCountry(s string) *DataUpdate {
	du.mutation.SetCountry(s)
	return du
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (du *DataUpdate) SetNillableCountry(s *string) *DataUpdate {
	if s != nil {
		du.SetCountry(*s)
	}
	return du
}

// SetDetails sets the "details" field.
func (du *DataUpdate) SetDetails(s string) *DataUpdate {
	du.mutation.SetDetails(s)
	return du
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (du *DataUpdate) SetNillableDetails(s *string) *DataUpdate {
	if s != nil {
		du.SetDetails(*s)
	}
	return du
}

// SetAmenities sets the "amenities" field.
func (du *DataUpdate) SetAmenities(s []string) *DataUpdate {
	du.mutation.SetAmenities(s)
	return du
}

// AppendAmenities appends s to the "amenities" field.
func (du *DataUpdate) AppendAmenities(s []string) *DataUpdate {
	du.mutation.AppendAmenities(s)
	return du
}

// SetImages sets the "images" field.
func (du *DataUpdate) SetImages(d []domain.Image) *DataUpdate {
	du.mutation.SetImages(d)
	return du
}

// AppendImages appends d to the "images" field.
func (du *DataUpdate) AppendImages(d []domain.Image) *DataUpdate {
	du.mutation.AppendImages(d)
	return du
}

// SetProvider sets the "provider" field.
func (du *DataUpdate) SetProvider(s string) *DataUpdate {
	du.mutation.SetProvider(s)
	return du
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (du *DataUpdate) SetNillableProvider(s *string) *DataUpdate {
	if s != nil {
		du.SetProvider(*s)
	}
	return du
}

// SetUpdatedAt sets the "updated_at" field.
func (du *DataUpdate) SetUpdatedAt(t time.Time) *DataUpdate {
	du.mutation.SetUpdatedAt(t)
	return du
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (du *DataUpdate) SetNillableUpdatedAt(t *time.Time) *DataUpdate {
	if t != nil {
		du.SetUpdatedAt(*t)
	}
	return du
}

// Mutation returns the DataMutation object of the builder.
func (du *DataUpdate) Mutation() *DataMutation {
	return du.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DataUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DataUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DataUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DataUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(data.Table, data.Columns, sqlgraph.NewFieldSpec(data.FieldID, field.TypeString))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.DestinationID(); ok {
		_spec.SetField(data.FieldDestinationID, field.TypeString, value)
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.SetField(data.FieldName, field.TypeString, value)
	}
	if value, ok := du.mutation.Latitude(); ok {
		_spec.SetField(data.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := du.mutation.AddedLatitude(); ok {
		_spec.AddField(data.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := du.mutation.Longitude(); ok {
		_spec.SetField(data.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := du.mutation.AddedLongitude(); ok {
		_spec.AddField(data.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := du.mutation.Address(); ok {
		_spec.SetField(data.FieldAddress, field.TypeString, value)
	}
	if value, ok := du.mutation.City(); ok {
		_spec.SetField(data.FieldCity, field.TypeString, value)
	}
	if value, ok := du.mutation.Country(); ok {
		_spec.SetField(data.FieldCountry, field.TypeString, value)
	}
	if value, ok := du.mutation.Details(); ok {
		_spec.SetField(data.FieldDetails, field.TypeString, value)
	}
	if value, ok := du.mutation.Amenities(); ok {
		_spec.SetField(data.FieldAmenities, field.TypeJSON, value)
	}
	if value, ok := du.mutation.AppendedAmenities(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, data.FieldAmenities, value)
		})
	}
	if value, ok := du.mutation.Images(); ok {
		_spec.SetField(data.FieldImages, field.TypeJSON, value)
	}
	if value, ok := du.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, data.FieldImages, value)
		})
	}
	if value, ok := du.mutation.Provider(); ok {
		_spec.SetField(data.FieldProvider, field.TypeString, value)
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.SetField(data.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{data.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DataUpdateOne is the builder for updating a single Data entity.
type DataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DataMutation
}

// SetDestinationID sets the "destination_id" field.
func (duo *DataUpdateOne) SetDestinationID(s string) *DataUpdateOne {
	duo.mutation.SetDestinationID(s)
	return duo
}

// SetNillableDestinationID sets the "destination_id" field if the given value is not nil.
func (duo *DataUpdateOne) SetNillableDestinationID(s *string) *DataUpdateOne {
	if s != nil {
		duo.SetDestinationID(*s)
	}
	return duo
}

// SetName sets the "name" field.
func (duo *DataUpdateOne) SetName(s string) *DataUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (duo *DataUpdateOne) SetNillableName(s *string) *DataUpdateOne {
	if s != nil {
		duo.SetName(*s)
	}
	return duo
}

// SetLatitude sets the "latitude" field.
func (duo *DataUpdateOne) SetLatitude(f float64) *DataUpdateOne {
	duo.mutation.ResetLatitude()
	duo.mutation.SetLatitude(f)
	return duo
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (duo *DataUpdateOne) SetNillableLatitude(f *float64) *DataUpdateOne {
	if f != nil {
		duo.SetLatitude(*f)
	}
	return duo
}

// AddLatitude adds f to the "latitude" field.
func (duo *DataUpdateOne) AddLatitude(f float64) *DataUpdateOne {
	duo.mutation.AddLatitude(f)
	return duo
}

// SetLongitude sets the "longitude" field.
func (duo *DataUpdateOne) SetLongitude(f float64) *DataUpdateOne {
	duo.mutation.ResetLongitude()
	duo.mutation.SetLongitude(f)
	return duo
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (duo *DataUpdateOne) SetNillableLongitude(f *float64) *DataUpdateOne {
	if f != nil {
		duo.SetLongitude(*f)
	}
	return duo
}

// AddLongitude adds f to the "longitude" field.
func (duo *DataUpdateOne) AddLongitude(f float64) *DataUpdateOne {
	duo.mutation.AddLongitude(f)
	return duo
}

// SetAddress sets the "address" field.
func (duo *DataUpdateOne) SetAddress(s string) *DataUpdateOne {
	duo.mutation.SetAddress(s)
	return duo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (duo *DataUpdateOne) SetNillableAddress(s *string) *DataUpdateOne {
	if s != nil {
		duo.SetAddress(*s)
	}
	return duo
}

// SetCity sets the "city" field.
func (duo *DataUpdateOne) SetCity(s string) *DataUpdateOne {
	duo.mutation.SetCity(s)
	return duo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (duo *DataUpdateOne) SetNillableCity(s *string) *DataUpdateOne {
	if s != nil {
		duo.SetCity(*s)
	}
	return duo
}

// SetCountry sets the "country" field.
func (duo *DataUpdateOne) SetCountry(s string) *DataUpdateOne {
	duo.mutation.SetCountry(s)
	return duo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (duo *DataUpdateOne) SetNillableCountry(s *string) *DataUpdateOne {
	if s != nil {
		duo.SetCountry(*s)
	}
	return duo
}

// SetDetails sets the "details" field.
func (duo *DataUpdateOne) SetDetails(s string) *DataUpdateOne {
	duo.mutation.SetDetails(s)
	return duo
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (duo *DataUpdateOne) SetNillableDetails(s *string) *DataUpdateOne {
	if s != nil {
		duo.SetDetails(*s)
	}
	return duo
}

// SetAmenities sets the "amenities" field.
func (duo *DataUpdateOne) SetAmenities(s []string) *DataUpdateOne {
	duo.mutation.SetAmenities(s)
	return duo
}

// AppendAmenities appends s to the "amenities" field.
func (duo *DataUpdateOne) AppendAmenities(s []string) *DataUpdateOne {
	duo.mutation.AppendAmenities(s)
	return duo
}

// SetImages sets the "images" field.
func (duo *DataUpdateOne) SetImages(d []domain.Image) *DataUpdateOne {
	duo.mutation.SetImages(d)
	return duo
}

// AppendImages appends d to the "images" field.
func (duo *DataUpdateOne) AppendImages(d []domain.Image) *DataUpdateOne {
	duo.mutation.AppendImages(d)
	return duo
}

// SetProvider sets the "provider" field.
func (duo *DataUpdateOne) SetProvider(s string) *DataUpdateOne {
	duo.mutation.SetProvider(s)
	return duo
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (duo *DataUpdateOne) SetNillableProvider(s *string) *DataUpdateOne {
	if s != nil {
		duo.SetProvider(*s)
	}
	return duo
}

// SetUpdatedAt sets the "updated_at" field.
func (duo *DataUpdateOne) SetUpdatedAt(t time.Time) *DataUpdateOne {
	duo.mutation.SetUpdatedAt(t)
	return duo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (duo *DataUpdateOne) SetNillableUpdatedAt(t *time.Time) *DataUpdateOne {
	if t != nil {
		duo.SetUpdatedAt(*t)
	}
	return duo
}

// Mutation returns the DataMutation object of the builder.
func (duo *DataUpdateOne) Mutation() *DataMutation {
	return duo.mutation
}

// Where appends a list predicates to the DataUpdate builder.
func (duo *DataUpdateOne) Where(ps ...predicate.Data) *DataUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DataUpdateOne) Select(field string, fields ...string) *DataUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Data entity.
func (duo *DataUpdateOne) Save(ctx context.Context) (*Data, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DataUpdateOne) SaveX(ctx context.Context) *Data {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DataUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DataUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DataUpdateOne) sqlSave(ctx context.Context) (_node *Data, err error) {
	_spec := sqlgraph.NewUpdateSpec(data.Table, data.Columns, sqlgraph.NewFieldSpec(data.FieldID, field.TypeString))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Data.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, data.FieldID)
		for _, f := range fields {
			if !data.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != data.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.DestinationID(); ok {
		_spec.SetField(data.FieldDestinationID, field.TypeString, value)
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.SetField(data.FieldName, field.TypeString, value)
	}
	if value, ok := duo.mutation.Latitude(); ok {
		_spec.SetField(data.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := duo.mutation.AddedLatitude(); ok {
		_spec.AddField(data.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := duo.mutation.Longitude(); ok {
		_spec.SetField(data.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := duo.mutation.AddedLongitude(); ok {
		_spec.AddField(data.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := duo.mutation.Address(); ok {
		_spec.SetField(data.FieldAddress, field.TypeString, value)
	}
	if value, ok := duo.mutation.City(); ok {
		_spec.SetField(data.FieldCity, field.TypeString, value)
	}
	if value, ok := duo.mutation.Country(); ok {
		_spec.SetField(data.FieldCountry, field.TypeString, value)
	}
	if value, ok := duo.mutation.Details(); ok {
		_spec.SetField(data.FieldDetails, field.TypeString, value)
	}
	if value, ok := duo.mutation.Amenities(); ok {
		_spec.SetField(data.FieldAmenities, field.TypeJSON, value)
	}
	if value, ok := duo.mutation.AppendedAmenities(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, data.FieldAmenities, value)
		})
	}
	if value, ok := duo.mutation.Images(); ok {
		_spec.SetField(data.FieldImages, field.TypeJSON, value)
	}
	if value, ok := duo.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, data.FieldImages, value)
		})
	}
	if value, ok := duo.mutation.Provider(); ok {
		_spec.SetField(data.FieldProvider, field.TypeString, value)
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.SetField(data.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Data{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{data.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
