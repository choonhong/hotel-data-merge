// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/choonhong/hotel-data-merge/domain"
	"github.com/choonhong/hotel-data-merge/ent/data"
)

// DataCreate is the builder for creating a Data entity.
type DataCreate struct {
	config
	mutation *DataMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDestinationID sets the "destination_id" field.
func (dc *DataCreate) SetDestinationID(s string) *DataCreate {
	dc.mutation.SetDestinationID(s)
	return dc
}

// SetName sets the "name" field.
func (dc *DataCreate) SetName(s string) *DataCreate {
	dc.mutation.SetName(s)
	return dc
}

// SetLatitude sets the "latitude" field.
func (dc *DataCreate) SetLatitude(f float64) *DataCreate {
	dc.mutation.SetLatitude(f)
	return dc
}

// SetLongitude sets the "longitude" field.
func (dc *DataCreate) SetLongitude(f float64) *DataCreate {
	dc.mutation.SetLongitude(f)
	return dc
}

// SetAddress sets the "address" field.
func (dc *DataCreate) SetAddress(s string) *DataCreate {
	dc.mutation.SetAddress(s)
	return dc
}

// SetCity sets the "city" field.
func (dc *DataCreate) SetCity(s string) *DataCreate {
	dc.mutation.SetCity(s)
	return dc
}

// SetCountry sets the "country" field.
func (dc *DataCreate) SetCountry(s string) *DataCreate {
	dc.mutation.SetCountry(s)
	return dc
}

// SetDetails sets the "details" field.
func (dc *DataCreate) SetDetails(s string) *DataCreate {
	dc.mutation.SetDetails(s)
	return dc
}

// SetAmenities sets the "amenities" field.
func (dc *DataCreate) SetAmenities(s []string) *DataCreate {
	dc.mutation.SetAmenities(s)
	return dc
}

// SetImages sets the "images" field.
func (dc *DataCreate) SetImages(d []domain.Image) *DataCreate {
	dc.mutation.SetImages(d)
	return dc
}

// SetProvider sets the "provider" field.
func (dc *DataCreate) SetProvider(s string) *DataCreate {
	dc.mutation.SetProvider(s)
	return dc
}

// SetUpdatedAt sets the "updated_at" field.
func (dc *DataCreate) SetUpdatedAt(t time.Time) *DataCreate {
	dc.mutation.SetUpdatedAt(t)
	return dc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dc *DataCreate) SetNillableUpdatedAt(t *time.Time) *DataCreate {
	if t != nil {
		dc.SetUpdatedAt(*t)
	}
	return dc
}

// SetID sets the "id" field.
func (dc *DataCreate) SetID(s string) *DataCreate {
	dc.mutation.SetID(s)
	return dc
}

// Mutation returns the DataMutation object of the builder.
func (dc *DataCreate) Mutation() *DataMutation {
	return dc.mutation
}

// Save creates the Data in the database.
func (dc *DataCreate) Save(ctx context.Context) (*Data, error) {
	dc.defaults()
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DataCreate) SaveX(ctx context.Context) *Data {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DataCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DataCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DataCreate) defaults() {
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		v := data.DefaultUpdatedAt
		dc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DataCreate) check() error {
	if _, ok := dc.mutation.DestinationID(); !ok {
		return &ValidationError{Name: "destination_id", err: errors.New(`ent: missing required field "Data.destination_id"`)}
	}
	if _, ok := dc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Data.name"`)}
	}
	if _, ok := dc.mutation.Latitude(); !ok {
		return &ValidationError{Name: "latitude", err: errors.New(`ent: missing required field "Data.latitude"`)}
	}
	if _, ok := dc.mutation.Longitude(); !ok {
		return &ValidationError{Name: "longitude", err: errors.New(`ent: missing required field "Data.longitude"`)}
	}
	if _, ok := dc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "Data.address"`)}
	}
	if _, ok := dc.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required field "Data.city"`)}
	}
	if _, ok := dc.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New(`ent: missing required field "Data.country"`)}
	}
	if _, ok := dc.mutation.Details(); !ok {
		return &ValidationError{Name: "details", err: errors.New(`ent: missing required field "Data.details"`)}
	}
	if _, ok := dc.mutation.Amenities(); !ok {
		return &ValidationError{Name: "amenities", err: errors.New(`ent: missing required field "Data.amenities"`)}
	}
	if _, ok := dc.mutation.Images(); !ok {
		return &ValidationError{Name: "images", err: errors.New(`ent: missing required field "Data.images"`)}
	}
	if _, ok := dc.mutation.Provider(); !ok {
		return &ValidationError{Name: "provider", err: errors.New(`ent: missing required field "Data.provider"`)}
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Data.updated_at"`)}
	}
	return nil
}

func (dc *DataCreate) sqlSave(ctx context.Context) (*Data, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Data.ID type: %T", _spec.ID.Value)
		}
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DataCreate) createSpec() (*Data, *sqlgraph.CreateSpec) {
	var (
		_node = &Data{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(data.Table, sqlgraph.NewFieldSpec(data.FieldID, field.TypeString))
	)
	_spec.OnConflict = dc.conflict
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dc.mutation.DestinationID(); ok {
		_spec.SetField(data.FieldDestinationID, field.TypeString, value)
		_node.DestinationID = value
	}
	if value, ok := dc.mutation.Name(); ok {
		_spec.SetField(data.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := dc.mutation.Latitude(); ok {
		_spec.SetField(data.FieldLatitude, field.TypeFloat64, value)
		_node.Latitude = value
	}
	if value, ok := dc.mutation.Longitude(); ok {
		_spec.SetField(data.FieldLongitude, field.TypeFloat64, value)
		_node.Longitude = value
	}
	if value, ok := dc.mutation.Address(); ok {
		_spec.SetField(data.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := dc.mutation.City(); ok {
		_spec.SetField(data.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := dc.mutation.Country(); ok {
		_spec.SetField(data.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if value, ok := dc.mutation.Details(); ok {
		_spec.SetField(data.FieldDetails, field.TypeString, value)
		_node.Details = value
	}
	if value, ok := dc.mutation.Amenities(); ok {
		_spec.SetField(data.FieldAmenities, field.TypeJSON, value)
		_node.Amenities = value
	}
	if value, ok := dc.mutation.Images(); ok {
		_spec.SetField(data.FieldImages, field.TypeJSON, value)
		_node.Images = value
	}
	if value, ok := dc.mutation.Provider(); ok {
		_spec.SetField(data.FieldProvider, field.TypeString, value)
		_node.Provider = value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.SetField(data.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Data.Create().
//		SetDestinationID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DataUpsert) {
//			SetDestinationID(v+v).
//		}).
//		Exec(ctx)
func (dc *DataCreate) OnConflict(opts ...sql.ConflictOption) *DataUpsertOne {
	dc.conflict = opts
	return &DataUpsertOne{
		create: dc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Data.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dc *DataCreate) OnConflictColumns(columns ...string) *DataUpsertOne {
	dc.conflict = append(dc.conflict, sql.ConflictColumns(columns...))
	return &DataUpsertOne{
		create: dc,
	}
}

type (
	// DataUpsertOne is the builder for "upsert"-ing
	//  one Data node.
	DataUpsertOne struct {
		create *DataCreate
	}

	// DataUpsert is the "OnConflict" setter.
	DataUpsert struct {
		*sql.UpdateSet
	}
)

// SetDestinationID sets the "destination_id" field.
func (u *DataUpsert) SetDestinationID(v string) *DataUpsert {
	u.Set(data.FieldDestinationID, v)
	return u
}

// UpdateDestinationID sets the "destination_id" field to the value that was provided on create.
func (u *DataUpsert) UpdateDestinationID() *DataUpsert {
	u.SetExcluded(data.FieldDestinationID)
	return u
}

// SetName sets the "name" field.
func (u *DataUpsert) SetName(v string) *DataUpsert {
	u.Set(data.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DataUpsert) UpdateName() *DataUpsert {
	u.SetExcluded(data.FieldName)
	return u
}

// SetLatitude sets the "latitude" field.
func (u *DataUpsert) SetLatitude(v float64) *DataUpsert {
	u.Set(data.FieldLatitude, v)
	return u
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *DataUpsert) UpdateLatitude() *DataUpsert {
	u.SetExcluded(data.FieldLatitude)
	return u
}

// AddLatitude adds v to the "latitude" field.
func (u *DataUpsert) AddLatitude(v float64) *DataUpsert {
	u.Add(data.FieldLatitude, v)
	return u
}

// SetLongitude sets the "longitude" field.
func (u *DataUpsert) SetLongitude(v float64) *DataUpsert {
	u.Set(data.FieldLongitude, v)
	return u
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *DataUpsert) UpdateLongitude() *DataUpsert {
	u.SetExcluded(data.FieldLongitude)
	return u
}

// AddLongitude adds v to the "longitude" field.
func (u *DataUpsert) AddLongitude(v float64) *DataUpsert {
	u.Add(data.FieldLongitude, v)
	return u
}

// SetAddress sets the "address" field.
func (u *DataUpsert) SetAddress(v string) *DataUpsert {
	u.Set(data.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *DataUpsert) UpdateAddress() *DataUpsert {
	u.SetExcluded(data.FieldAddress)
	return u
}

// SetCity sets the "city" field.
func (u *DataUpsert) SetCity(v string) *DataUpsert {
	u.Set(data.FieldCity, v)
	return u
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *DataUpsert) UpdateCity() *DataUpsert {
	u.SetExcluded(data.FieldCity)
	return u
}

// SetCountry sets the "country" field.
func (u *DataUpsert) SetCountry(v string) *DataUpsert {
	u.Set(data.FieldCountry, v)
	return u
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *DataUpsert) UpdateCountry() *DataUpsert {
	u.SetExcluded(data.FieldCountry)
	return u
}

// SetDetails sets the "details" field.
func (u *DataUpsert) SetDetails(v string) *DataUpsert {
	u.Set(data.FieldDetails, v)
	return u
}

// UpdateDetails sets the "details" field to the value that was provided on create.
func (u *DataUpsert) UpdateDetails() *DataUpsert {
	u.SetExcluded(data.FieldDetails)
	return u
}

// SetAmenities sets the "amenities" field.
func (u *DataUpsert) SetAmenities(v []string) *DataUpsert {
	u.Set(data.FieldAmenities, v)
	return u
}

// UpdateAmenities sets the "amenities" field to the value that was provided on create.
func (u *DataUpsert) UpdateAmenities() *DataUpsert {
	u.SetExcluded(data.FieldAmenities)
	return u
}

// SetImages sets the "images" field.
func (u *DataUpsert) SetImages(v []domain.Image) *DataUpsert {
	u.Set(data.FieldImages, v)
	return u
}

// UpdateImages sets the "images" field to the value that was provided on create.
func (u *DataUpsert) UpdateImages() *DataUpsert {
	u.SetExcluded(data.FieldImages)
	return u
}

// SetProvider sets the "provider" field.
func (u *DataUpsert) SetProvider(v string) *DataUpsert {
	u.Set(data.FieldProvider, v)
	return u
}

// UpdateProvider sets the "provider" field to the value that was provided on create.
func (u *DataUpsert) UpdateProvider() *DataUpsert {
	u.SetExcluded(data.FieldProvider)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DataUpsert) SetUpdatedAt(v time.Time) *DataUpsert {
	u.Set(data.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DataUpsert) UpdateUpdatedAt() *DataUpsert {
	u.SetExcluded(data.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Data.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(data.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DataUpsertOne) UpdateNewValues() *DataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(data.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Data.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DataUpsertOne) Ignore() *DataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DataUpsertOne) DoNothing() *DataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DataCreate.OnConflict
// documentation for more info.
func (u *DataUpsertOne) Update(set func(*DataUpsert)) *DataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DataUpsert{UpdateSet: update})
	}))
	return u
}

// SetDestinationID sets the "destination_id" field.
func (u *DataUpsertOne) SetDestinationID(v string) *DataUpsertOne {
	return u.Update(func(s *DataUpsert) {
		s.SetDestinationID(v)
	})
}

// UpdateDestinationID sets the "destination_id" field to the value that was provided on create.
func (u *DataUpsertOne) UpdateDestinationID() *DataUpsertOne {
	return u.Update(func(s *DataUpsert) {
		s.UpdateDestinationID()
	})
}

// SetName sets the "name" field.
func (u *DataUpsertOne) SetName(v string) *DataUpsertOne {
	return u.Update(func(s *DataUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DataUpsertOne) UpdateName() *DataUpsertOne {
	return u.Update(func(s *DataUpsert) {
		s.UpdateName()
	})
}

// SetLatitude sets the "latitude" field.
func (u *DataUpsertOne) SetLatitude(v float64) *DataUpsertOne {
	return u.Update(func(s *DataUpsert) {
		s.SetLatitude(v)
	})
}

// AddLatitude adds v to the "latitude" field.
func (u *DataUpsertOne) AddLatitude(v float64) *DataUpsertOne {
	return u.Update(func(s *DataUpsert) {
		s.AddLatitude(v)
	})
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *DataUpsertOne) UpdateLatitude() *DataUpsertOne {
	return u.Update(func(s *DataUpsert) {
		s.UpdateLatitude()
	})
}

// SetLongitude sets the "longitude" field.
func (u *DataUpsertOne) SetLongitude(v float64) *DataUpsertOne {
	return u.Update(func(s *DataUpsert) {
		s.SetLongitude(v)
	})
}

// AddLongitude adds v to the "longitude" field.
func (u *DataUpsertOne) AddLongitude(v float64) *DataUpsertOne {
	return u.Update(func(s *DataUpsert) {
		s.AddLongitude(v)
	})
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *DataUpsertOne) UpdateLongitude() *DataUpsertOne {
	return u.Update(func(s *DataUpsert) {
		s.UpdateLongitude()
	})
}

// SetAddress sets the "address" field.
func (u *DataUpsertOne) SetAddress(v string) *DataUpsertOne {
	return u.Update(func(s *DataUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *DataUpsertOne) UpdateAddress() *DataUpsertOne {
	return u.Update(func(s *DataUpsert) {
		s.UpdateAddress()
	})
}

// SetCity sets the "city" field.
func (u *DataUpsertOne) SetCity(v string) *DataUpsertOne {
	return u.Update(func(s *DataUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *DataUpsertOne) UpdateCity() *DataUpsertOne {
	return u.Update(func(s *DataUpsert) {
		s.UpdateCity()
	})
}

// SetCountry sets the "country" field.
func (u *DataUpsertOne) SetCountry(v string) *DataUpsertOne {
	return u.Update(func(s *DataUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *DataUpsertOne) UpdateCountry() *DataUpsertOne {
	return u.Update(func(s *DataUpsert) {
		s.UpdateCountry()
	})
}

// SetDetails sets the "details" field.
func (u *DataUpsertOne) SetDetails(v string) *DataUpsertOne {
	return u.Update(func(s *DataUpsert) {
		s.SetDetails(v)
	})
}

// UpdateDetails sets the "details" field to the value that was provided on create.
func (u *DataUpsertOne) UpdateDetails() *DataUpsertOne {
	return u.Update(func(s *DataUpsert) {
		s.UpdateDetails()
	})
}

// SetAmenities sets the "amenities" field.
func (u *DataUpsertOne) SetAmenities(v []string) *DataUpsertOne {
	return u.Update(func(s *DataUpsert) {
		s.SetAmenities(v)
	})
}

// UpdateAmenities sets the "amenities" field to the value that was provided on create.
func (u *DataUpsertOne) UpdateAmenities() *DataUpsertOne {
	return u.Update(func(s *DataUpsert) {
		s.UpdateAmenities()
	})
}

// SetImages sets the "images" field.
func (u *DataUpsertOne) SetImages(v []domain.Image) *DataUpsertOne {
	return u.Update(func(s *DataUpsert) {
		s.SetImages(v)
	})
}

// UpdateImages sets the "images" field to the value that was provided on create.
func (u *DataUpsertOne) UpdateImages() *DataUpsertOne {
	return u.Update(func(s *DataUpsert) {
		s.UpdateImages()
	})
}

// SetProvider sets the "provider" field.
func (u *DataUpsertOne) SetProvider(v string) *DataUpsertOne {
	return u.Update(func(s *DataUpsert) {
		s.SetProvider(v)
	})
}

// UpdateProvider sets the "provider" field to the value that was provided on create.
func (u *DataUpsertOne) UpdateProvider() *DataUpsertOne {
	return u.Update(func(s *DataUpsert) {
		s.UpdateProvider()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DataUpsertOne) SetUpdatedAt(v time.Time) *DataUpsertOne {
	return u.Update(func(s *DataUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DataUpsertOne) UpdateUpdatedAt() *DataUpsertOne {
	return u.Update(func(s *DataUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *DataUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DataCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DataUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DataUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: DataUpsertOne.ID is not supported by MySQL driver. Use DataUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DataUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DataCreateBulk is the builder for creating many Data entities in bulk.
type DataCreateBulk struct {
	config
	err      error
	builders []*DataCreate
	conflict []sql.ConflictOption
}

// Save creates the Data entities in the database.
func (dcb *DataCreateBulk) Save(ctx context.Context) ([]*Data, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Data, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DataCreateBulk) SaveX(ctx context.Context) []*Data {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DataCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DataCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Data.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DataUpsert) {
//			SetDestinationID(v+v).
//		}).
//		Exec(ctx)
func (dcb *DataCreateBulk) OnConflict(opts ...sql.ConflictOption) *DataUpsertBulk {
	dcb.conflict = opts
	return &DataUpsertBulk{
		create: dcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Data.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dcb *DataCreateBulk) OnConflictColumns(columns ...string) *DataUpsertBulk {
	dcb.conflict = append(dcb.conflict, sql.ConflictColumns(columns...))
	return &DataUpsertBulk{
		create: dcb,
	}
}

// DataUpsertBulk is the builder for "upsert"-ing
// a bulk of Data nodes.
type DataUpsertBulk struct {
	create *DataCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Data.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(data.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DataUpsertBulk) UpdateNewValues() *DataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(data.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Data.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DataUpsertBulk) Ignore() *DataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DataUpsertBulk) DoNothing() *DataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DataCreateBulk.OnConflict
// documentation for more info.
func (u *DataUpsertBulk) Update(set func(*DataUpsert)) *DataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DataUpsert{UpdateSet: update})
	}))
	return u
}

// SetDestinationID sets the "destination_id" field.
func (u *DataUpsertBulk) SetDestinationID(v string) *DataUpsertBulk {
	return u.Update(func(s *DataUpsert) {
		s.SetDestinationID(v)
	})
}

// UpdateDestinationID sets the "destination_id" field to the value that was provided on create.
func (u *DataUpsertBulk) UpdateDestinationID() *DataUpsertBulk {
	return u.Update(func(s *DataUpsert) {
		s.UpdateDestinationID()
	})
}

// SetName sets the "name" field.
func (u *DataUpsertBulk) SetName(v string) *DataUpsertBulk {
	return u.Update(func(s *DataUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DataUpsertBulk) UpdateName() *DataUpsertBulk {
	return u.Update(func(s *DataUpsert) {
		s.UpdateName()
	})
}

// SetLatitude sets the "latitude" field.
func (u *DataUpsertBulk) SetLatitude(v float64) *DataUpsertBulk {
	return u.Update(func(s *DataUpsert) {
		s.SetLatitude(v)
	})
}

// AddLatitude adds v to the "latitude" field.
func (u *DataUpsertBulk) AddLatitude(v float64) *DataUpsertBulk {
	return u.Update(func(s *DataUpsert) {
		s.AddLatitude(v)
	})
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *DataUpsertBulk) UpdateLatitude() *DataUpsertBulk {
	return u.Update(func(s *DataUpsert) {
		s.UpdateLatitude()
	})
}

// SetLongitude sets the "longitude" field.
func (u *DataUpsertBulk) SetLongitude(v float64) *DataUpsertBulk {
	return u.Update(func(s *DataUpsert) {
		s.SetLongitude(v)
	})
}

// AddLongitude adds v to the "longitude" field.
func (u *DataUpsertBulk) AddLongitude(v float64) *DataUpsertBulk {
	return u.Update(func(s *DataUpsert) {
		s.AddLongitude(v)
	})
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *DataUpsertBulk) UpdateLongitude() *DataUpsertBulk {
	return u.Update(func(s *DataUpsert) {
		s.UpdateLongitude()
	})
}

// SetAddress sets the "address" field.
func (u *DataUpsertBulk) SetAddress(v string) *DataUpsertBulk {
	return u.Update(func(s *DataUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *DataUpsertBulk) UpdateAddress() *DataUpsertBulk {
	return u.Update(func(s *DataUpsert) {
		s.UpdateAddress()
	})
}

// SetCity sets the "city" field.
func (u *DataUpsertBulk) SetCity(v string) *DataUpsertBulk {
	return u.Update(func(s *DataUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *DataUpsertBulk) UpdateCity() *DataUpsertBulk {
	return u.Update(func(s *DataUpsert) {
		s.UpdateCity()
	})
}

// SetCountry sets the "country" field.
func (u *DataUpsertBulk) SetCountry(v string) *DataUpsertBulk {
	return u.Update(func(s *DataUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *DataUpsertBulk) UpdateCountry() *DataUpsertBulk {
	return u.Update(func(s *DataUpsert) {
		s.UpdateCountry()
	})
}

// SetDetails sets the "details" field.
func (u *DataUpsertBulk) SetDetails(v string) *DataUpsertBulk {
	return u.Update(func(s *DataUpsert) {
		s.SetDetails(v)
	})
}

// UpdateDetails sets the "details" field to the value that was provided on create.
func (u *DataUpsertBulk) UpdateDetails() *DataUpsertBulk {
	return u.Update(func(s *DataUpsert) {
		s.UpdateDetails()
	})
}

// SetAmenities sets the "amenities" field.
func (u *DataUpsertBulk) SetAmenities(v []string) *DataUpsertBulk {
	return u.Update(func(s *DataUpsert) {
		s.SetAmenities(v)
	})
}

// UpdateAmenities sets the "amenities" field to the value that was provided on create.
func (u *DataUpsertBulk) UpdateAmenities() *DataUpsertBulk {
	return u.Update(func(s *DataUpsert) {
		s.UpdateAmenities()
	})
}

// SetImages sets the "images" field.
func (u *DataUpsertBulk) SetImages(v []domain.Image) *DataUpsertBulk {
	return u.Update(func(s *DataUpsert) {
		s.SetImages(v)
	})
}

// UpdateImages sets the "images" field to the value that was provided on create.
func (u *DataUpsertBulk) UpdateImages() *DataUpsertBulk {
	return u.Update(func(s *DataUpsert) {
		s.UpdateImages()
	})
}

// SetProvider sets the "provider" field.
func (u *DataUpsertBulk) SetProvider(v string) *DataUpsertBulk {
	return u.Update(func(s *DataUpsert) {
		s.SetProvider(v)
	})
}

// UpdateProvider sets the "provider" field to the value that was provided on create.
func (u *DataUpsertBulk) UpdateProvider() *DataUpsertBulk {
	return u.Update(func(s *DataUpsert) {
		s.UpdateProvider()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DataUpsertBulk) SetUpdatedAt(v time.Time) *DataUpsertBulk {
	return u.Update(func(s *DataUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DataUpsertBulk) UpdateUpdatedAt() *DataUpsertBulk {
	return u.Update(func(s *DataUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *DataUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DataCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DataCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DataUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
