// Code generated by ent, DO NOT EDIT.

package hotel

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the hotel type in the database.
	Label = "hotel"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDestinationID holds the string denoting the destination_id field in the database.
	FieldDestinationID = "destination_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldLatitude holds the string denoting the latitude field in the database.
	FieldLatitude = "latitude"
	// FieldLongitude holds the string denoting the longitude field in the database.
	FieldLongitude = "longitude"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "city"
	// FieldCountry holds the string denoting the country field in the database.
	FieldCountry = "country"
	// FieldDetails holds the string denoting the details field in the database.
	FieldDetails = "details"
	// FieldAmenities holds the string denoting the amenities field in the database.
	FieldAmenities = "amenities"
	// FieldImages holds the string denoting the images field in the database.
	FieldImages = "images"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the hotel in the database.
	Table = "hotels"
)

// Columns holds all SQL columns for hotel fields.
var Columns = []string{
	FieldID,
	FieldDestinationID,
	FieldName,
	FieldLatitude,
	FieldLongitude,
	FieldAddress,
	FieldCity,
	FieldCountry,
	FieldDetails,
	FieldAmenities,
	FieldImages,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt time.Time
)

// OrderOption defines the ordering options for the Hotel queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDestinationID orders the results by the destination_id field.
func ByDestinationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDestinationID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByLatitude orders the results by the latitude field.
func ByLatitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLatitude, opts...).ToFunc()
}

// ByLongitude orders the results by the longitude field.
func ByLongitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLongitude, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByCity orders the results by the city field.
func ByCity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCity, opts...).ToFunc()
}

// ByCountry orders the results by the country field.
func ByCountry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountry, opts...).ToFunc()
}

// ByDetails orders the results by the details field.
func ByDetails(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDetails, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
