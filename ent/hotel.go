// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/choonhong/hotel-data-merge/domain"
	"github.com/choonhong/hotel-data-merge/ent/hotel"
)

// Hotel is the model entity for the Hotel schema.
type Hotel struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// DestinationID holds the value of the "destination_id" field.
	DestinationID string `json:"destination_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Latitude holds the value of the "latitude" field.
	Latitude float64 `json:"latitude,omitempty"`
	// Longitude holds the value of the "longitude" field.
	Longitude float64 `json:"longitude,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// City holds the value of the "city" field.
	City string `json:"city,omitempty"`
	// Country holds the value of the "country" field.
	Country string `json:"country,omitempty"`
	// Details holds the value of the "details" field.
	Details string `json:"details,omitempty"`
	// Amenities holds the value of the "amenities" field.
	Amenities []string `json:"amenities,omitempty"`
	// Images holds the value of the "images" field.
	Images []domain.Image `json:"images,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Hotel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hotel.FieldAmenities, hotel.FieldImages:
			values[i] = new([]byte)
		case hotel.FieldLatitude, hotel.FieldLongitude:
			values[i] = new(sql.NullFloat64)
		case hotel.FieldID, hotel.FieldDestinationID, hotel.FieldName, hotel.FieldAddress, hotel.FieldCity, hotel.FieldCountry, hotel.FieldDetails:
			values[i] = new(sql.NullString)
		case hotel.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Hotel fields.
func (h *Hotel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hotel.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				h.ID = value.String
			}
		case hotel.FieldDestinationID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field destination_id", values[i])
			} else if value.Valid {
				h.DestinationID = value.String
			}
		case hotel.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				h.Name = value.String
			}
		case hotel.FieldLatitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field latitude", values[i])
			} else if value.Valid {
				h.Latitude = value.Float64
			}
		case hotel.FieldLongitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field longitude", values[i])
			} else if value.Valid {
				h.Longitude = value.Float64
			}
		case hotel.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				h.Address = value.String
			}
		case hotel.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				h.City = value.String
			}
		case hotel.FieldCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country", values[i])
			} else if value.Valid {
				h.Country = value.String
			}
		case hotel.FieldDetails:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field details", values[i])
			} else if value.Valid {
				h.Details = value.String
			}
		case hotel.FieldAmenities:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field amenities", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &h.Amenities); err != nil {
					return fmt.Errorf("unmarshal field amenities: %w", err)
				}
			}
		case hotel.FieldImages:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field images", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &h.Images); err != nil {
					return fmt.Errorf("unmarshal field images: %w", err)
				}
			}
		case hotel.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				h.UpdatedAt = value.Time
			}
		default:
			h.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Hotel.
// This includes values selected through modifiers, order, etc.
func (h *Hotel) Value(name string) (ent.Value, error) {
	return h.selectValues.Get(name)
}

// Update returns a builder for updating this Hotel.
// Note that you need to call Hotel.Unwrap() before calling this method if this Hotel
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *Hotel) Update() *HotelUpdateOne {
	return NewHotelClient(h.config).UpdateOne(h)
}

// Unwrap unwraps the Hotel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *Hotel) Unwrap() *Hotel {
	_tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: Hotel is not a transactional entity")
	}
	h.config.driver = _tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *Hotel) String() string {
	var builder strings.Builder
	builder.WriteString("Hotel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", h.ID))
	builder.WriteString("destination_id=")
	builder.WriteString(h.DestinationID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(h.Name)
	builder.WriteString(", ")
	builder.WriteString("latitude=")
	builder.WriteString(fmt.Sprintf("%v", h.Latitude))
	builder.WriteString(", ")
	builder.WriteString("longitude=")
	builder.WriteString(fmt.Sprintf("%v", h.Longitude))
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(h.Address)
	builder.WriteString(", ")
	builder.WriteString("city=")
	builder.WriteString(h.City)
	builder.WriteString(", ")
	builder.WriteString("country=")
	builder.WriteString(h.Country)
	builder.WriteString(", ")
	builder.WriteString("details=")
	builder.WriteString(h.Details)
	builder.WriteString(", ")
	builder.WriteString("amenities=")
	builder.WriteString(fmt.Sprintf("%v", h.Amenities))
	builder.WriteString(", ")
	builder.WriteString("images=")
	builder.WriteString(fmt.Sprintf("%v", h.Images))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(h.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Hotels is a parsable slice of Hotel.
type Hotels []*Hotel
