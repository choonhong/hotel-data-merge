// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/choonhong/hotel-data-merge/ent/hotel"
	"github.com/choonhong/hotel-data-merge/ent/predicate"
)

// HotelQuery is the builder for querying Hotel entities.
type HotelQuery struct {
	config
	ctx        *QueryContext
	order      []hotel.OrderOption
	inters     []Interceptor
	predicates []predicate.Hotel
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HotelQuery builder.
func (hq *HotelQuery) Where(ps ...predicate.Hotel) *HotelQuery {
	hq.predicates = append(hq.predicates, ps...)
	return hq
}

// Limit the number of records to be returned by this query.
func (hq *HotelQuery) Limit(limit int) *HotelQuery {
	hq.ctx.Limit = &limit
	return hq
}

// Offset to start from.
func (hq *HotelQuery) Offset(offset int) *HotelQuery {
	hq.ctx.Offset = &offset
	return hq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (hq *HotelQuery) Unique(unique bool) *HotelQuery {
	hq.ctx.Unique = &unique
	return hq
}

// Order specifies how the records should be ordered.
func (hq *HotelQuery) Order(o ...hotel.OrderOption) *HotelQuery {
	hq.order = append(hq.order, o...)
	return hq
}

// First returns the first Hotel entity from the query.
// Returns a *NotFoundError when no Hotel was found.
func (hq *HotelQuery) First(ctx context.Context) (*Hotel, error) {
	nodes, err := hq.Limit(1).All(setContextOp(ctx, hq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{hotel.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (hq *HotelQuery) FirstX(ctx context.Context) *Hotel {
	node, err := hq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Hotel ID from the query.
// Returns a *NotFoundError when no Hotel ID was found.
func (hq *HotelQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = hq.Limit(1).IDs(setContextOp(ctx, hq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{hotel.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (hq *HotelQuery) FirstIDX(ctx context.Context) string {
	id, err := hq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Hotel entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Hotel entity is found.
// Returns a *NotFoundError when no Hotel entities are found.
func (hq *HotelQuery) Only(ctx context.Context) (*Hotel, error) {
	nodes, err := hq.Limit(2).All(setContextOp(ctx, hq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{hotel.Label}
	default:
		return nil, &NotSingularError{hotel.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (hq *HotelQuery) OnlyX(ctx context.Context) *Hotel {
	node, err := hq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Hotel ID in the query.
// Returns a *NotSingularError when more than one Hotel ID is found.
// Returns a *NotFoundError when no entities are found.
func (hq *HotelQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = hq.Limit(2).IDs(setContextOp(ctx, hq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{hotel.Label}
	default:
		err = &NotSingularError{hotel.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (hq *HotelQuery) OnlyIDX(ctx context.Context) string {
	id, err := hq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Hotels.
func (hq *HotelQuery) All(ctx context.Context) ([]*Hotel, error) {
	ctx = setContextOp(ctx, hq.ctx, "All")
	if err := hq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Hotel, *HotelQuery]()
	return withInterceptors[[]*Hotel](ctx, hq, qr, hq.inters)
}

// AllX is like All, but panics if an error occurs.
func (hq *HotelQuery) AllX(ctx context.Context) []*Hotel {
	nodes, err := hq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Hotel IDs.
func (hq *HotelQuery) IDs(ctx context.Context) (ids []string, err error) {
	if hq.ctx.Unique == nil && hq.path != nil {
		hq.Unique(true)
	}
	ctx = setContextOp(ctx, hq.ctx, "IDs")
	if err = hq.Select(hotel.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (hq *HotelQuery) IDsX(ctx context.Context) []string {
	ids, err := hq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (hq *HotelQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, hq.ctx, "Count")
	if err := hq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, hq, querierCount[*HotelQuery](), hq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (hq *HotelQuery) CountX(ctx context.Context) int {
	count, err := hq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (hq *HotelQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, hq.ctx, "Exist")
	switch _, err := hq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (hq *HotelQuery) ExistX(ctx context.Context) bool {
	exist, err := hq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HotelQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (hq *HotelQuery) Clone() *HotelQuery {
	if hq == nil {
		return nil
	}
	return &HotelQuery{
		config:     hq.config,
		ctx:        hq.ctx.Clone(),
		order:      append([]hotel.OrderOption{}, hq.order...),
		inters:     append([]Interceptor{}, hq.inters...),
		predicates: append([]predicate.Hotel{}, hq.predicates...),
		// clone intermediate query.
		sql:  hq.sql.Clone(),
		path: hq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		DestinationID string `json:"destination_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Hotel.Query().
//		GroupBy(hotel.FieldDestinationID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (hq *HotelQuery) GroupBy(field string, fields ...string) *HotelGroupBy {
	hq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &HotelGroupBy{build: hq}
	grbuild.flds = &hq.ctx.Fields
	grbuild.label = hotel.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		DestinationID string `json:"destination_id,omitempty"`
//	}
//
//	client.Hotel.Query().
//		Select(hotel.FieldDestinationID).
//		Scan(ctx, &v)
func (hq *HotelQuery) Select(fields ...string) *HotelSelect {
	hq.ctx.Fields = append(hq.ctx.Fields, fields...)
	sbuild := &HotelSelect{HotelQuery: hq}
	sbuild.label = hotel.Label
	sbuild.flds, sbuild.scan = &hq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a HotelSelect configured with the given aggregations.
func (hq *HotelQuery) Aggregate(fns ...AggregateFunc) *HotelSelect {
	return hq.Select().Aggregate(fns...)
}

func (hq *HotelQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range hq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, hq); err != nil {
				return err
			}
		}
	}
	for _, f := range hq.ctx.Fields {
		if !hotel.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if hq.path != nil {
		prev, err := hq.path(ctx)
		if err != nil {
			return err
		}
		hq.sql = prev
	}
	return nil
}

func (hq *HotelQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Hotel, error) {
	var (
		nodes = []*Hotel{}
		_spec = hq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Hotel).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Hotel{config: hq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, hq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (hq *HotelQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := hq.querySpec()
	_spec.Node.Columns = hq.ctx.Fields
	if len(hq.ctx.Fields) > 0 {
		_spec.Unique = hq.ctx.Unique != nil && *hq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, hq.driver, _spec)
}

func (hq *HotelQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(hotel.Table, hotel.Columns, sqlgraph.NewFieldSpec(hotel.FieldID, field.TypeString))
	_spec.From = hq.sql
	if unique := hq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if hq.path != nil {
		_spec.Unique = true
	}
	if fields := hq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hotel.FieldID)
		for i := range fields {
			if fields[i] != hotel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := hq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := hq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := hq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := hq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (hq *HotelQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(hq.driver.Dialect())
	t1 := builder.Table(hotel.Table)
	columns := hq.ctx.Fields
	if len(columns) == 0 {
		columns = hotel.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if hq.sql != nil {
		selector = hq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if hq.ctx.Unique != nil && *hq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range hq.predicates {
		p(selector)
	}
	for _, p := range hq.order {
		p(selector)
	}
	if offset := hq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := hq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// HotelGroupBy is the group-by builder for Hotel entities.
type HotelGroupBy struct {
	selector
	build *HotelQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (hgb *HotelGroupBy) Aggregate(fns ...AggregateFunc) *HotelGroupBy {
	hgb.fns = append(hgb.fns, fns...)
	return hgb
}

// Scan applies the selector query and scans the result into the given value.
func (hgb *HotelGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hgb.build.ctx, "GroupBy")
	if err := hgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HotelQuery, *HotelGroupBy](ctx, hgb.build, hgb, hgb.build.inters, v)
}

func (hgb *HotelGroupBy) sqlScan(ctx context.Context, root *HotelQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(hgb.fns))
	for _, fn := range hgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*hgb.flds)+len(hgb.fns))
		for _, f := range *hgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*hgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// HotelSelect is the builder for selecting fields of Hotel entities.
type HotelSelect struct {
	*HotelQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (hs *HotelSelect) Aggregate(fns ...AggregateFunc) *HotelSelect {
	hs.fns = append(hs.fns, fns...)
	return hs
}

// Scan applies the selector query and scans the result into the given value.
func (hs *HotelSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hs.ctx, "Select")
	if err := hs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HotelQuery, *HotelSelect](ctx, hs.HotelQuery, hs, hs.inters, v)
}

func (hs *HotelSelect) sqlScan(ctx context.Context, root *HotelQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(hs.fns))
	for _, fn := range hs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*hs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
