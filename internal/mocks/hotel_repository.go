// Code generated by mockery v2.49.1. DO NOT EDIT.

package mocks

import (
	context "context"

	ent "github.com/choonhong/hotel-data-merge/ent"

	mock "github.com/stretchr/testify/mock"
)

// HotelRepository is an autogenerated mock type for the HotelRepository type
type HotelRepository struct {
	mock.Mock
}

type HotelRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *HotelRepository) EXPECT() *HotelRepository_Expecter {
	return &HotelRepository_Expecter{mock: &_m.Mock}
}

// GetHotels provides a mock function with given fields: ctx, ids, destinationID
func (_m *HotelRepository) GetHotels(ctx context.Context, ids *[]string, destinationID *int) ([]*ent.Hotel, error) {
	ret := _m.Called(ctx, ids, destinationID)

	if len(ret) == 0 {
		panic("no return value specified for GetHotels")
	}

	var r0 []*ent.Hotel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *[]string, *int) ([]*ent.Hotel, error)); ok {
		return rf(ctx, ids, destinationID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *[]string, *int) []*ent.Hotel); ok {
		r0 = rf(ctx, ids, destinationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Hotel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *[]string, *int) error); ok {
		r1 = rf(ctx, ids, destinationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HotelRepository_GetHotels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHotels'
type HotelRepository_GetHotels_Call struct {
	*mock.Call
}

// GetHotels is a helper method to define mock.On call
//   - ctx context.Context
//   - ids *[]string
//   - destinationID *int
func (_e *HotelRepository_Expecter) GetHotels(ctx interface{}, ids interface{}, destinationID interface{}) *HotelRepository_GetHotels_Call {
	return &HotelRepository_GetHotels_Call{Call: _e.mock.On("GetHotels", ctx, ids, destinationID)}
}

func (_c *HotelRepository_GetHotels_Call) Run(run func(ctx context.Context, ids *[]string, destinationID *int)) *HotelRepository_GetHotels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*[]string), args[2].(*int))
	})
	return _c
}

func (_c *HotelRepository_GetHotels_Call) Return(_a0 []*ent.Hotel, _a1 error) *HotelRepository_GetHotels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HotelRepository_GetHotels_Call) RunAndReturn(run func(context.Context, *[]string, *int) ([]*ent.Hotel, error)) *HotelRepository_GetHotels_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, hotels
func (_m *HotelRepository) Save(ctx context.Context, hotels *ent.Hotel) error {
	ret := _m.Called(ctx, hotels)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Hotel) error); ok {
		r0 = rf(ctx, hotels)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HotelRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type HotelRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - hotels *ent.Hotel
func (_e *HotelRepository_Expecter) Save(ctx interface{}, hotels interface{}) *HotelRepository_Save_Call {
	return &HotelRepository_Save_Call{Call: _e.mock.On("Save", ctx, hotels)}
}

func (_c *HotelRepository_Save_Call) Run(run func(ctx context.Context, hotels *ent.Hotel)) *HotelRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ent.Hotel))
	})
	return _c
}

func (_c *HotelRepository_Save_Call) Return(_a0 error) *HotelRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HotelRepository_Save_Call) RunAndReturn(run func(context.Context, *ent.Hotel) error) *HotelRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewHotelRepository creates a new instance of HotelRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHotelRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *HotelRepository {
	mock := &HotelRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
