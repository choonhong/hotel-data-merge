// Code generated by mockery v2.49.1. DO NOT EDIT.

package mocks

import (
	context "context"

	ent "github.com/choonhong/hotel-data-merge/ent"

	mock "github.com/stretchr/testify/mock"
)

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

type Provider_Expecter struct {
	mock *mock.Mock
}

func (_m *Provider) EXPECT() *Provider_Expecter {
	return &Provider_Expecter{mock: &_m.Mock}
}

// FetchAll provides a mock function with given fields: _a0
func (_m *Provider) FetchAll(_a0 context.Context) ([]*ent.Hotel, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for FetchAll")
	}

	var r0 []*ent.Hotel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*ent.Hotel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*ent.Hotel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Hotel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Provider_FetchAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchAll'
type Provider_FetchAll_Call struct {
	*mock.Call
}

// FetchAll is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Provider_Expecter) FetchAll(_a0 interface{}) *Provider_FetchAll_Call {
	return &Provider_FetchAll_Call{Call: _e.mock.On("FetchAll", _a0)}
}

func (_c *Provider_FetchAll_Call) Run(run func(_a0 context.Context)) *Provider_FetchAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Provider_FetchAll_Call) Return(_a0 []*ent.Hotel, _a1 error) *Provider_FetchAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Provider_FetchAll_Call) RunAndReturn(run func(context.Context) ([]*ent.Hotel, error)) *Provider_FetchAll_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *Provider) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Provider_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type Provider_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *Provider_Expecter) Name() *Provider_Name_Call {
	return &Provider_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *Provider_Name_Call) Run(run func()) *Provider_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_Name_Call) Return(_a0 string) *Provider_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_Name_Call) RunAndReturn(run func() string) *Provider_Name_Call {
	_c.Call.Return(run)
	return _c
}

// NewProvider creates a new instance of Provider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *Provider {
	mock := &Provider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
